// Code generated by hertz generator.

package gateway

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	gateway "shield/gateway/biz/model/kaidog/shield/gateway"
)

// CreateAccount .
// @router /create_account [POST]
func CreateAccount(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.AccountCreateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(gateway.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// CreateUser .
// @router /create_user [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.UserCreateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(gateway.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateUserInfo .
// @router /update_user [POST]
func UpdateUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.UserInfoUpdateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(gateway.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// ResetPassword .
// @router /rest_password [POST]
func ResetPassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.PasswordRestReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(gateway.BaseResp)

	c.JSON(consts.StatusOK, resp)
}

// SwitchAccountStatus .
// @router /switch_account_status [POST]
func SwitchAccountStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.AccountStatusSwitchReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(gateway.BaseResp)

	c.JSON(consts.StatusOK, resp)
}
