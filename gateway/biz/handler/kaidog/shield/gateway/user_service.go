// Code generated by hertz generator.

package gateway

import (
	"context"

	"shield/common/errs"
	"shield/common/logs"
	"shield/common/middleware/hertz/csrf"
	"shield/gateway/biz/model/consts"
	gateway "shield/gateway/biz/model/kaidog/shield/gateway"
	"shield/gateway/biz/service"
	"shield/gateway/biz/util"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/hertz-contrib/sessions"
)

// Login .
// @router /login [POST]
// 调用account的login接口进行登录
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.LoginReq
	var resp gateway.LoginResp
	err = c.BindAndValidate(&req)
	if err != nil {
		logs.CtxErrorf(ctx, "BindAndValidate fail, %v", err)
		util.BuildBizResp(c, &resp, errs.ParamError.SetErr(err))
		return
	}

	loginResp, bizErr := service.Login(
		ctx,
		&service.LoginReq{
			Username: req.GetUsername(),
			Password: req.GetPassword(),
			Ip:       util.GetIp(c),
			Device:   util.GetDevice(c),
		},
	)
	if bizErr != nil {
		util.BuildBizResp(c, &resp, bizErr)
		return
	}

	sess := sessions.Default(c)
	sess.Set(consts.SessionAccountId, loginResp.AccountID)
	if err = sess.Save(); err != nil {
		logs.CtxErrorf(ctx, "save session err: %v", err)
		util.BuildBizResp(c, &resp, errs.ServerError.SetErr(err))
		return
	}

	c.Header(csrf.CsrfHeaderName, csrf.GetToken(c))

	if bizErr = service.StoreSessionId(ctx, loginResp.AccountID, sess.ID()); bizErr != nil {
		util.BuildBizResp(c, &resp, bizErr)
		return
	}

	util.BuildBizResp(c, &resp, nil)
}

// Logout .
// @router /logout [POST]
// 删除会话信息
func Logout(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.LogoutReq
	var resp gateway.LogoutResp
	err = c.BindAndValidate(&req)
	if err != nil {
		logs.CtxErrorf(ctx, "BindAndValidate fail, %v", err)
		util.BuildBizResp(c, &resp, errs.ParamError.SetErr(err))
		return
	}

	accountId := c.MustGet(consts.ContextAccountId).(string)

	sessID, bizErr := service.GetSessionId(ctx, accountId)
	if bizErr != nil {
		util.BuildBizResp(c, &resp, bizErr)
		return
	}

	sess := sessions.Default(c)
	if sess.ID() == sessID {
		if bizErr = service.RemoveSessionId(ctx, accountId); bizErr != nil {
			util.BuildBizResp(c, &resp, bizErr)
			return
		}
	}

	sess.Clear()
	_ = sess.Save()

	util.BuildBizResp(c, &resp, nil)
}

// QuerySelfUserInfo .
// @router /user_info [GET]
func QuerySelfUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.SelfUserInfoQueryReq
	var resp gateway.SelfUserInfoQueryResp
	err = c.BindAndValidate(&req)
	if err != nil {
		logs.CtxErrorf(ctx, "BindAndValidate fail, %v", err)
		util.BuildBizResp(c, &resp, errs.ParamError.SetErr(err))
		return
	}

	queryResp, bizErr := service.QuerySelfUserInfo(
		ctx,
		&service.SelfUserInfoQueryReq{
			AccountID: c.MustGet(consts.ContextAccountId).(string),
		},
	)
	if queryResp != nil {
		resp.Info = queryResp.Info
	}

	util.BuildBizResp(c, &resp, bizErr)
}

// QuerySelfLoginRecord .
// @router /login_record [GET]
func QuerySelfLoginRecord(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.SelfLoginRecordQueryReq
	var resp gateway.SelfLoginRecordQueryResp
	err = c.BindAndValidate(&req)
	if err != nil {
		logs.CtxErrorf(ctx, "BindAndValidate fail, %v", err)
		util.BuildBizResp(c, &resp, errs.ParamError.SetErr(err))
		return
	}

	queryResp, bizErr := service.QuerySelfLoginRecord(
		ctx,
		&service.SelfLoginRecordQueryReq{
			AccountID: c.MustGet(consts.ContextAccountId).(string),
		},
	)
	if queryResp != nil {
		resp.LoginRecord = queryResp.LoginRecord
		resp.Total = queryResp.Total
		resp.Page = queryResp.Page
		resp.Size = queryResp.Size
	}

	util.BuildBizResp(c, &resp, bizErr)
}

// UpdatePassword .
// @router update_password [POST]
func UpdatePassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.PasswordUpdateReq
	var resp gateway.PasswordUpdateResp
	err = c.BindAndValidate(&req)
	if err != nil {
		logs.CtxErrorf(ctx, "BindAndValidate fail, %v", err)
		util.BuildBizResp(c, &resp, errs.ParamError.SetErr(err))
		return
	}

	bizErr := service.UpdatePassword(
		ctx,
		&service.PasswordUpdateReq{
			AccountID:   c.MustGet(consts.ContextAccountId).(string),
			OldPassword: req.GetOldPassword(),
			NewPassword: req.GetNewPassword(),
		},
	)

	util.BuildBizResp(c, &resp, bizErr)
}
