// Code generated by hertz generator.

package gateway

import (
	"context"

	"shield/common/logs"
	gateway "shield/gateway/biz/model/kaidog/shield/gateway"
	"shield/gateway/biz/rpc"
	"shield/gateway/biz/util"

	"github.com/cloudwego/hertz/pkg/app"
)

// Login .
// @router /login [POST]
// 调用account的login接口进行登录
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.LoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		logs.CtxError(ctx, "BindAndValidate fail, %v", err)
		util.BuildRespParamErr(c, err)
		return
	}

	rpcResp, bizErr := rpc.Login(
		ctx,
		&rpc.LoginReq{
			Username: req.GetUsername(),
			Password: req.GetPassword(),
			Device:   util.GetIp(c),
			Ipv4:     util.GetDevice(c),
		},
	)
	if bizErr != nil {
		util.BuildRespBizErr(c, bizErr)
		return
	}

	util.BuildRespSuccess(
		c,
		&gateway.LoginResp{
			AccountID: rpcResp.AccountId,
		},
	)
}

// Logout .
// @router /logout [POST]
// 删除会话信息
func Logout(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.LogoutReq
	err = c.BindAndValidate(&req)
	if err != nil {
		logs.CtxError(ctx, "BindAndValidate fail, %v", err)
		util.BuildRespParamErr(c, err)
		return
	}

	util.BuildRespSuccess(c, nil)
}

// QueryUserInfo .
// @router /user_info [GET]
func QueryUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.UserInfoQueryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		logs.CtxError(ctx, "BindAndValidate fail, %v", err)
		util.BuildRespParamErr(c, err)
		return
	}

	rpcResp, bizErr := rpc.QueryUserInfoByAccountId(ctx, req.GetAccountID())
	if bizErr != nil {
		util.BuildRespBizErr(c, bizErr)
		return
	}

	util.BuildRespSuccess(
		c,
		&gateway.UserInfoQueryResp{
			AccountID:   rpcResp.AccountId,
			UserID:      rpcResp.UserId,
			Name:        rpcResp.Name,
			Gender:      rpcResp.Gender,
			Phone:       rpcResp.Phone,
			Email:       rpcResp.Email,
			Description: rpcResp.Description,
			CreatedAt:   rpcResp.CreatedAt.Unix(),
			UpdatedAt:   rpcResp.CreatedAt.Unix(),
		},
	)
}

// QueryLoginRecord .
// @router /login_record [GET]
func QueryLoginRecord(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.LoginRecordQueryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		logs.CtxError(ctx, "BindAndValidate fail, %v", err)
		util.BuildRespParamErr(c, err)
		return
	}

	rpcResp, bizErr := rpc.QueryLoginRecordByAccountId(ctx, req.GetAccountID())
	if bizErr != nil {
		util.BuildRespBizErr(c, bizErr)
		return
	}

	var recordList []*gateway.LoginRecord
	for _, record := range rpcResp.RecordList {
		recordList = append(
			recordList,
			&gateway.LoginRecord{
				AccountID: record.AccountId,
				Ipv4:      record.Ipv4,
				Device:    record.Device,
				Status:    record.Status,
				Reason:    record.Reason,
				LoginAt:   record.LoginAt.Unix(),
			},
		)
	}

	util.BuildRespSuccess(
		c,
		&gateway.LoginRecordQueryResp{
			Page:        rpcResp.Page,
			Size:        rpcResp.Size,
			Total:       rpcResp.Total,
			LoginRecord: recordList,
		},
	)
}

// UpdatePassword .
// @router update_password [POST]
func UpdatePassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.PasswordUpdateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		logs.CtxError(ctx, "BindAndValidate fail, %v", err)
		util.BuildRespParamErr(c, err)
		return
	}

	bizErr := rpc.UpdatePassword(
		ctx,
		&rpc.UpdatePasswordReq{
			AccountId:   req.GetAccountID(),
			OldPassword: req.GetOldPassword(),
			NewPassword: req.GetNewPassword(),
		},
	)
	if bizErr != nil {
		util.BuildRespBizErr(c, bizErr)
		return
	}

	util.BuildRespSuccess(c, nil)
}
