// Code generated by thriftgo (0.3.2). DO NOT EDIT.

package account

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"shield/gateway/kitex_gen/base"
	"strings"
)

type AccountStatus int64

const (
	AccountStatus_valid   AccountStatus = 1
	AccountStatus_invalid AccountStatus = 2
)

func (p AccountStatus) String() string {
	switch p {
	case AccountStatus_valid:
		return "valid"
	case AccountStatus_invalid:
		return "invalid"
	}
	return "<UNSET>"
}

func AccountStatusFromString(s string) (AccountStatus, error) {
	switch s {
	case "valid":
		return AccountStatus_valid, nil
	case "invalid":
		return AccountStatus_invalid, nil
	}
	return AccountStatus(0), fmt.Errorf("not a valid AccountStatus string")
}

func AccountStatusPtr(v AccountStatus) *AccountStatus { return &v }
func (p *AccountStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = AccountStatus(result.Int64)
	return
}

func (p *AccountStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type LoginStatus int64

const (
	LoginStatus_success LoginStatus = 1
	LoginStatus_fail    LoginStatus = 2
)

func (p LoginStatus) String() string {
	switch p {
	case LoginStatus_success:
		return "success"
	case LoginStatus_fail:
		return "fail"
	}
	return "<UNSET>"
}

func LoginStatusFromString(s string) (LoginStatus, error) {
	switch s {
	case "success":
		return LoginStatus_success, nil
	case "fail":
		return LoginStatus_fail, nil
	}
	return LoginStatus(0), fmt.Errorf("not a valid LoginStatus string")
}

func LoginStatusPtr(v LoginStatus) *LoginStatus { return &v }
func (p *LoginStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = LoginStatus(result.Int64)
	return
}

func (p *LoginStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Gender int64

const (
	Gender_male   Gender = 1
	Gender_female Gender = 2
	Gender_others Gender = 3
)

func (p Gender) String() string {
	switch p {
	case Gender_male:
		return "male"
	case Gender_female:
		return "female"
	case Gender_others:
		return "others"
	}
	return "<UNSET>"
}

func GenderFromString(s string) (Gender, error) {
	switch s {
	case "male":
		return Gender_male, nil
	case "female":
		return Gender_female, nil
	case "others":
		return Gender_others, nil
	}
	return Gender(0), fmt.Errorf("not a valid Gender string")
}

func GenderPtr(v Gender) *Gender { return &v }
func (p *Gender) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Gender(result.Int64)
	return
}

func (p *Gender) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Account struct {
	AccountID string        `thrift:"accountID,1,required" frugal:"1,required,string" json:"accountID"`
	Username  string        `thrift:"username,2,required" frugal:"2,required,string" json:"username"`
	Status    AccountStatus `thrift:"status,3,required" frugal:"3,required,AccountStatus" json:"status"`
}

func NewAccount() *Account {
	return &Account{}
}

func (p *Account) InitDefault() {
	*p = Account{}
}

func (p *Account) GetAccountID() (v string) {
	return p.AccountID
}

func (p *Account) GetUsername() (v string) {
	return p.Username
}

func (p *Account) GetStatus() (v AccountStatus) {
	return p.Status
}
func (p *Account) SetAccountID(val string) {
	p.AccountID = val
}
func (p *Account) SetUsername(val string) {
	p.Username = val
}
func (p *Account) SetStatus(val AccountStatus) {
	p.Status = val
}

var fieldIDToName_Account = map[int16]string{
	1: "accountID",
	2: "username",
	3: "status",
}

func (p *Account) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAccountID bool = false
	var issetUsername bool = false
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAccountID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsername = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAccountID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUsername {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Account[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Account[fieldId]))
}

func (p *Account) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountID = v
	}
	return nil
}

func (p *Account) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = v
	}
	return nil
}

func (p *Account) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = AccountStatus(v)
	}
	return nil
}

func (p *Account) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Account"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Account) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Account) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Username); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Account) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Account) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Account(%+v)", *p)
}

func (p *Account) DeepEqual(ano *Account) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Username) {
		return false
	}
	if !p.Field3DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *Account) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AccountID, src) != 0 {
		return false
	}
	return true
}
func (p *Account) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *Account) Field3DeepEqual(src AccountStatus) bool {

	if p.Status != src {
		return false
	}
	return true
}

type AccountQueryReq struct {
	Page int64         `thrift:"page,1,required" frugal:"1,required,i64" json:"page"`
	Size int64         `thrift:"size,2,required" frugal:"2,required,i64" json:"size"`
	Base *base.BaseReq `thrift:"base,255,required" frugal:"255,required,base.BaseReq" json:"base"`
}

func NewAccountQueryReq() *AccountQueryReq {
	return &AccountQueryReq{}
}

func (p *AccountQueryReq) InitDefault() {
	*p = AccountQueryReq{}
}

func (p *AccountQueryReq) GetPage() (v int64) {
	return p.Page
}

func (p *AccountQueryReq) GetSize() (v int64) {
	return p.Size
}

var AccountQueryReq_Base_DEFAULT *base.BaseReq

func (p *AccountQueryReq) GetBase() (v *base.BaseReq) {
	if !p.IsSetBase() {
		return AccountQueryReq_Base_DEFAULT
	}
	return p.Base
}
func (p *AccountQueryReq) SetPage(val int64) {
	p.Page = val
}
func (p *AccountQueryReq) SetSize(val int64) {
	p.Size = val
}
func (p *AccountQueryReq) SetBase(val *base.BaseReq) {
	p.Base = val
}

var fieldIDToName_AccountQueryReq = map[int16]string{
	1:   "page",
	2:   "size",
	255: "base",
}

func (p *AccountQueryReq) IsSetBase() bool {
	return p.Base != nil
}

func (p *AccountQueryReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPage bool = false
	var issetSize bool = false
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPage {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountQueryReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AccountQueryReq[fieldId]))
}

func (p *AccountQueryReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Page = v
	}
	return nil
}

func (p *AccountQueryReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Size = v
	}
	return nil
}

func (p *AccountQueryReq) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseReq()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountQueryReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountQueryReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountQueryReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Page); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountQueryReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("size", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Size); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AccountQueryReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AccountQueryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountQueryReq(%+v)", *p)
}

func (p *AccountQueryReq) DeepEqual(ano *AccountQueryReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Page) {
		return false
	}
	if !p.Field2DeepEqual(ano.Size) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AccountQueryReq) Field1DeepEqual(src int64) bool {

	if p.Page != src {
		return false
	}
	return true
}
func (p *AccountQueryReq) Field2DeepEqual(src int64) bool {

	if p.Size != src {
		return false
	}
	return true
}
func (p *AccountQueryReq) Field255DeepEqual(src *base.BaseReq) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AccountQueryResp struct {
	AccountList []*Account     `thrift:"accountList,1,optional" frugal:"1,optional,list<Account>" json:"accountList,omitempty"`
	Total       *int64         `thrift:"total,2,optional" frugal:"2,optional,i64" json:"total,omitempty"`
	Page        *int64         `thrift:"page,3,optional" frugal:"3,optional,i64" json:"page,omitempty"`
	Size        *int64         `thrift:"size,4,optional" frugal:"4,optional,i64" json:"size,omitempty"`
	Base        *base.BaseResp `thrift:"base,255,required" frugal:"255,required,base.BaseResp" json:"base"`
}

func NewAccountQueryResp() *AccountQueryResp {
	return &AccountQueryResp{}
}

func (p *AccountQueryResp) InitDefault() {
	*p = AccountQueryResp{}
}

var AccountQueryResp_AccountList_DEFAULT []*Account

func (p *AccountQueryResp) GetAccountList() (v []*Account) {
	if !p.IsSetAccountList() {
		return AccountQueryResp_AccountList_DEFAULT
	}
	return p.AccountList
}

var AccountQueryResp_Total_DEFAULT int64

func (p *AccountQueryResp) GetTotal() (v int64) {
	if !p.IsSetTotal() {
		return AccountQueryResp_Total_DEFAULT
	}
	return *p.Total
}

var AccountQueryResp_Page_DEFAULT int64

func (p *AccountQueryResp) GetPage() (v int64) {
	if !p.IsSetPage() {
		return AccountQueryResp_Page_DEFAULT
	}
	return *p.Page
}

var AccountQueryResp_Size_DEFAULT int64

func (p *AccountQueryResp) GetSize() (v int64) {
	if !p.IsSetSize() {
		return AccountQueryResp_Size_DEFAULT
	}
	return *p.Size
}

var AccountQueryResp_Base_DEFAULT *base.BaseResp

func (p *AccountQueryResp) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return AccountQueryResp_Base_DEFAULT
	}
	return p.Base
}
func (p *AccountQueryResp) SetAccountList(val []*Account) {
	p.AccountList = val
}
func (p *AccountQueryResp) SetTotal(val *int64) {
	p.Total = val
}
func (p *AccountQueryResp) SetPage(val *int64) {
	p.Page = val
}
func (p *AccountQueryResp) SetSize(val *int64) {
	p.Size = val
}
func (p *AccountQueryResp) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_AccountQueryResp = map[int16]string{
	1:   "accountList",
	2:   "total",
	3:   "page",
	4:   "size",
	255: "base",
}

func (p *AccountQueryResp) IsSetAccountList() bool {
	return p.AccountList != nil
}

func (p *AccountQueryResp) IsSetTotal() bool {
	return p.Total != nil
}

func (p *AccountQueryResp) IsSetPage() bool {
	return p.Page != nil
}

func (p *AccountQueryResp) IsSetSize() bool {
	return p.Size != nil
}

func (p *AccountQueryResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *AccountQueryResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountQueryResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AccountQueryResp[fieldId]))
}

func (p *AccountQueryResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.AccountList = make([]*Account, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewAccount()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.AccountList = append(p.AccountList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *AccountQueryResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = &v
	}
	return nil
}

func (p *AccountQueryResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Page = &v
	}
	return nil
}

func (p *AccountQueryResp) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Size = &v
	}
	return nil
}

func (p *AccountQueryResp) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountQueryResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountQueryResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountQueryResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccountList() {
		if err = oprot.WriteFieldBegin("accountList", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AccountList)); err != nil {
			return err
		}
		for _, v := range p.AccountList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountQueryResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AccountQueryResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AccountQueryResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err = oprot.WriteFieldBegin("size", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Size); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AccountQueryResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AccountQueryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountQueryResp(%+v)", *p)
}

func (p *AccountQueryResp) DeepEqual(ano *AccountQueryResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountList) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field3DeepEqual(ano.Page) {
		return false
	}
	if !p.Field4DeepEqual(ano.Size) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AccountQueryResp) Field1DeepEqual(src []*Account) bool {

	if len(p.AccountList) != len(src) {
		return false
	}
	for i, v := range p.AccountList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *AccountQueryResp) Field2DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *AccountQueryResp) Field3DeepEqual(src *int64) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *AccountQueryResp) Field4DeepEqual(src *int64) bool {

	if p.Size == src {
		return true
	} else if p.Size == nil || src == nil {
		return false
	}
	if *p.Size != *src {
		return false
	}
	return true
}
func (p *AccountQueryResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AccountCreateReq struct {
	Username string        `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Password string        `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
	Base     *base.BaseReq `thrift:"base,255,required" frugal:"255,required,base.BaseReq" json:"base"`
}

func NewAccountCreateReq() *AccountCreateReq {
	return &AccountCreateReq{}
}

func (p *AccountCreateReq) InitDefault() {
	*p = AccountCreateReq{}
}

func (p *AccountCreateReq) GetUsername() (v string) {
	return p.Username
}

func (p *AccountCreateReq) GetPassword() (v string) {
	return p.Password
}

var AccountCreateReq_Base_DEFAULT *base.BaseReq

func (p *AccountCreateReq) GetBase() (v *base.BaseReq) {
	if !p.IsSetBase() {
		return AccountCreateReq_Base_DEFAULT
	}
	return p.Base
}
func (p *AccountCreateReq) SetUsername(val string) {
	p.Username = val
}
func (p *AccountCreateReq) SetPassword(val string) {
	p.Password = val
}
func (p *AccountCreateReq) SetBase(val *base.BaseReq) {
	p.Base = val
}

var fieldIDToName_AccountCreateReq = map[int16]string{
	1:   "username",
	2:   "password",
	255: "base",
}

func (p *AccountCreateReq) IsSetBase() bool {
	return p.Base != nil
}

func (p *AccountCreateReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUsername bool = false
	var issetPassword bool = false
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsername = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUsername {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPassword {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountCreateReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AccountCreateReq[fieldId]))
}

func (p *AccountCreateReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = v
	}
	return nil
}

func (p *AccountCreateReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = v
	}
	return nil
}

func (p *AccountCreateReq) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseReq()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountCreateReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountCreateReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountCreateReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Username); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountCreateReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AccountCreateReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AccountCreateReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountCreateReq(%+v)", *p)
}

func (p *AccountCreateReq) DeepEqual(ano *AccountCreateReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AccountCreateReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *AccountCreateReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}
func (p *AccountCreateReq) Field255DeepEqual(src *base.BaseReq) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AccountCreateResp struct {
	AccountID *string        `thrift:"accountID,1,optional" frugal:"1,optional,string" json:"accountID,omitempty"`
	Base      *base.BaseResp `thrift:"base,255,required" frugal:"255,required,base.BaseResp" json:"base"`
}

func NewAccountCreateResp() *AccountCreateResp {
	return &AccountCreateResp{}
}

func (p *AccountCreateResp) InitDefault() {
	*p = AccountCreateResp{}
}

var AccountCreateResp_AccountID_DEFAULT string

func (p *AccountCreateResp) GetAccountID() (v string) {
	if !p.IsSetAccountID() {
		return AccountCreateResp_AccountID_DEFAULT
	}
	return *p.AccountID
}

var AccountCreateResp_Base_DEFAULT *base.BaseResp

func (p *AccountCreateResp) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return AccountCreateResp_Base_DEFAULT
	}
	return p.Base
}
func (p *AccountCreateResp) SetAccountID(val *string) {
	p.AccountID = val
}
func (p *AccountCreateResp) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_AccountCreateResp = map[int16]string{
	1:   "accountID",
	255: "base",
}

func (p *AccountCreateResp) IsSetAccountID() bool {
	return p.AccountID != nil
}

func (p *AccountCreateResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *AccountCreateResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountCreateResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AccountCreateResp[fieldId]))
}

func (p *AccountCreateResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountID = &v
	}
	return nil
}

func (p *AccountCreateResp) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountCreateResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountCreateResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountCreateResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccountID() {
		if err = oprot.WriteFieldBegin("accountID", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AccountID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountCreateResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AccountCreateResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountCreateResp(%+v)", *p)
}

func (p *AccountCreateResp) DeepEqual(ano *AccountCreateResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AccountCreateResp) Field1DeepEqual(src *string) bool {

	if p.AccountID == src {
		return true
	} else if p.AccountID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AccountID, *src) != 0 {
		return false
	}
	return true
}
func (p *AccountCreateResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AccountPasswordUpdateReq struct {
	AccountID    string        `thrift:"accountID,1,required" frugal:"1,required,string" json:"accountID"`
	Password     string        `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
	NewPassword_ string        `thrift:"newPassword,3,required" frugal:"3,required,string" json:"newPassword"`
	Base         *base.BaseReq `thrift:"base,255,required" frugal:"255,required,base.BaseReq" json:"base"`
}

func NewAccountPasswordUpdateReq() *AccountPasswordUpdateReq {
	return &AccountPasswordUpdateReq{}
}

func (p *AccountPasswordUpdateReq) InitDefault() {
	*p = AccountPasswordUpdateReq{}
}

func (p *AccountPasswordUpdateReq) GetAccountID() (v string) {
	return p.AccountID
}

func (p *AccountPasswordUpdateReq) GetPassword() (v string) {
	return p.Password
}

func (p *AccountPasswordUpdateReq) GetNewPassword_() (v string) {
	return p.NewPassword_
}

var AccountPasswordUpdateReq_Base_DEFAULT *base.BaseReq

func (p *AccountPasswordUpdateReq) GetBase() (v *base.BaseReq) {
	if !p.IsSetBase() {
		return AccountPasswordUpdateReq_Base_DEFAULT
	}
	return p.Base
}
func (p *AccountPasswordUpdateReq) SetAccountID(val string) {
	p.AccountID = val
}
func (p *AccountPasswordUpdateReq) SetPassword(val string) {
	p.Password = val
}
func (p *AccountPasswordUpdateReq) SetNewPassword_(val string) {
	p.NewPassword_ = val
}
func (p *AccountPasswordUpdateReq) SetBase(val *base.BaseReq) {
	p.Base = val
}

var fieldIDToName_AccountPasswordUpdateReq = map[int16]string{
	1:   "accountID",
	2:   "password",
	3:   "newPassword",
	255: "base",
}

func (p *AccountPasswordUpdateReq) IsSetBase() bool {
	return p.Base != nil
}

func (p *AccountPasswordUpdateReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAccountID bool = false
	var issetPassword bool = false
	var issetNewPassword_ bool = false
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAccountID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNewPassword_ = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAccountID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPassword {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNewPassword_ {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountPasswordUpdateReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AccountPasswordUpdateReq[fieldId]))
}

func (p *AccountPasswordUpdateReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountID = v
	}
	return nil
}

func (p *AccountPasswordUpdateReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = v
	}
	return nil
}

func (p *AccountPasswordUpdateReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NewPassword_ = v
	}
	return nil
}

func (p *AccountPasswordUpdateReq) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseReq()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountPasswordUpdateReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountPasswordUpdateReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountPasswordUpdateReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountPasswordUpdateReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AccountPasswordUpdateReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("newPassword", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NewPassword_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AccountPasswordUpdateReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AccountPasswordUpdateReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountPasswordUpdateReq(%+v)", *p)
}

func (p *AccountPasswordUpdateReq) DeepEqual(ano *AccountPasswordUpdateReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	if !p.Field3DeepEqual(ano.NewPassword_) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AccountPasswordUpdateReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AccountID, src) != 0 {
		return false
	}
	return true
}
func (p *AccountPasswordUpdateReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}
func (p *AccountPasswordUpdateReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.NewPassword_, src) != 0 {
		return false
	}
	return true
}
func (p *AccountPasswordUpdateReq) Field255DeepEqual(src *base.BaseReq) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AccountPasswordUpdateResp struct {
	Base *base.BaseResp `thrift:"base,255,required" frugal:"255,required,base.BaseResp" json:"base"`
}

func NewAccountPasswordUpdateResp() *AccountPasswordUpdateResp {
	return &AccountPasswordUpdateResp{}
}

func (p *AccountPasswordUpdateResp) InitDefault() {
	*p = AccountPasswordUpdateResp{}
}

var AccountPasswordUpdateResp_Base_DEFAULT *base.BaseResp

func (p *AccountPasswordUpdateResp) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return AccountPasswordUpdateResp_Base_DEFAULT
	}
	return p.Base
}
func (p *AccountPasswordUpdateResp) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_AccountPasswordUpdateResp = map[int16]string{
	255: "base",
}

func (p *AccountPasswordUpdateResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *AccountPasswordUpdateResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountPasswordUpdateResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AccountPasswordUpdateResp[fieldId]))
}

func (p *AccountPasswordUpdateResp) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountPasswordUpdateResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountPasswordUpdateResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountPasswordUpdateResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AccountPasswordUpdateResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountPasswordUpdateResp(%+v)", *p)
}

func (p *AccountPasswordUpdateResp) DeepEqual(ano *AccountPasswordUpdateResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AccountPasswordUpdateResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AccountPasswordResetReq struct {
	AccountID string        `thrift:"accountID,1,required" frugal:"1,required,string" json:"accountID"`
	Password  string        `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
	Base      *base.BaseReq `thrift:"base,255,required" frugal:"255,required,base.BaseReq" json:"base"`
}

func NewAccountPasswordResetReq() *AccountPasswordResetReq {
	return &AccountPasswordResetReq{}
}

func (p *AccountPasswordResetReq) InitDefault() {
	*p = AccountPasswordResetReq{}
}

func (p *AccountPasswordResetReq) GetAccountID() (v string) {
	return p.AccountID
}

func (p *AccountPasswordResetReq) GetPassword() (v string) {
	return p.Password
}

var AccountPasswordResetReq_Base_DEFAULT *base.BaseReq

func (p *AccountPasswordResetReq) GetBase() (v *base.BaseReq) {
	if !p.IsSetBase() {
		return AccountPasswordResetReq_Base_DEFAULT
	}
	return p.Base
}
func (p *AccountPasswordResetReq) SetAccountID(val string) {
	p.AccountID = val
}
func (p *AccountPasswordResetReq) SetPassword(val string) {
	p.Password = val
}
func (p *AccountPasswordResetReq) SetBase(val *base.BaseReq) {
	p.Base = val
}

var fieldIDToName_AccountPasswordResetReq = map[int16]string{
	1:   "accountID",
	2:   "password",
	255: "base",
}

func (p *AccountPasswordResetReq) IsSetBase() bool {
	return p.Base != nil
}

func (p *AccountPasswordResetReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAccountID bool = false
	var issetPassword bool = false
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAccountID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAccountID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPassword {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountPasswordResetReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AccountPasswordResetReq[fieldId]))
}

func (p *AccountPasswordResetReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountID = v
	}
	return nil
}

func (p *AccountPasswordResetReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = v
	}
	return nil
}

func (p *AccountPasswordResetReq) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseReq()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountPasswordResetReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountPasswordResetReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountPasswordResetReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountPasswordResetReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AccountPasswordResetReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AccountPasswordResetReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountPasswordResetReq(%+v)", *p)
}

func (p *AccountPasswordResetReq) DeepEqual(ano *AccountPasswordResetReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AccountPasswordResetReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AccountID, src) != 0 {
		return false
	}
	return true
}
func (p *AccountPasswordResetReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}
func (p *AccountPasswordResetReq) Field255DeepEqual(src *base.BaseReq) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AccountPasswordResetResp struct {
	Base *base.BaseResp `thrift:"base,255,required" frugal:"255,required,base.BaseResp" json:"base"`
}

func NewAccountPasswordResetResp() *AccountPasswordResetResp {
	return &AccountPasswordResetResp{}
}

func (p *AccountPasswordResetResp) InitDefault() {
	*p = AccountPasswordResetResp{}
}

var AccountPasswordResetResp_Base_DEFAULT *base.BaseResp

func (p *AccountPasswordResetResp) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return AccountPasswordResetResp_Base_DEFAULT
	}
	return p.Base
}
func (p *AccountPasswordResetResp) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_AccountPasswordResetResp = map[int16]string{
	255: "base",
}

func (p *AccountPasswordResetResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *AccountPasswordResetResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountPasswordResetResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AccountPasswordResetResp[fieldId]))
}

func (p *AccountPasswordResetResp) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountPasswordResetResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountPasswordResetResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountPasswordResetResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AccountPasswordResetResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountPasswordResetResp(%+v)", *p)
}

func (p *AccountPasswordResetResp) DeepEqual(ano *AccountPasswordResetResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AccountPasswordResetResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AccountStatusUpdateReq struct {
	AccountID string        `thrift:"accountID,1,required" frugal:"1,required,string" json:"accountID"`
	Status    AccountStatus `thrift:"status,2,required" frugal:"2,required,AccountStatus" json:"status"`
	Base      *base.BaseReq `thrift:"base,255,required" frugal:"255,required,base.BaseReq" json:"base"`
}

func NewAccountStatusUpdateReq() *AccountStatusUpdateReq {
	return &AccountStatusUpdateReq{}
}

func (p *AccountStatusUpdateReq) InitDefault() {
	*p = AccountStatusUpdateReq{}
}

func (p *AccountStatusUpdateReq) GetAccountID() (v string) {
	return p.AccountID
}

func (p *AccountStatusUpdateReq) GetStatus() (v AccountStatus) {
	return p.Status
}

var AccountStatusUpdateReq_Base_DEFAULT *base.BaseReq

func (p *AccountStatusUpdateReq) GetBase() (v *base.BaseReq) {
	if !p.IsSetBase() {
		return AccountStatusUpdateReq_Base_DEFAULT
	}
	return p.Base
}
func (p *AccountStatusUpdateReq) SetAccountID(val string) {
	p.AccountID = val
}
func (p *AccountStatusUpdateReq) SetStatus(val AccountStatus) {
	p.Status = val
}
func (p *AccountStatusUpdateReq) SetBase(val *base.BaseReq) {
	p.Base = val
}

var fieldIDToName_AccountStatusUpdateReq = map[int16]string{
	1:   "accountID",
	2:   "status",
	255: "base",
}

func (p *AccountStatusUpdateReq) IsSetBase() bool {
	return p.Base != nil
}

func (p *AccountStatusUpdateReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAccountID bool = false
	var issetStatus bool = false
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAccountID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAccountID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountStatusUpdateReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AccountStatusUpdateReq[fieldId]))
}

func (p *AccountStatusUpdateReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountID = v
	}
	return nil
}

func (p *AccountStatusUpdateReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = AccountStatus(v)
	}
	return nil
}

func (p *AccountStatusUpdateReq) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseReq()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountStatusUpdateReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountStatusUpdateReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountStatusUpdateReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountStatusUpdateReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AccountStatusUpdateReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AccountStatusUpdateReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountStatusUpdateReq(%+v)", *p)
}

func (p *AccountStatusUpdateReq) DeepEqual(ano *AccountStatusUpdateReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Status) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AccountStatusUpdateReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AccountID, src) != 0 {
		return false
	}
	return true
}
func (p *AccountStatusUpdateReq) Field2DeepEqual(src AccountStatus) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *AccountStatusUpdateReq) Field255DeepEqual(src *base.BaseReq) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AccountStatusUpdateResp struct {
	Base *base.BaseResp `thrift:"base,255,required" frugal:"255,required,base.BaseResp" json:"base"`
}

func NewAccountStatusUpdateResp() *AccountStatusUpdateResp {
	return &AccountStatusUpdateResp{}
}

func (p *AccountStatusUpdateResp) InitDefault() {
	*p = AccountStatusUpdateResp{}
}

var AccountStatusUpdateResp_Base_DEFAULT *base.BaseResp

func (p *AccountStatusUpdateResp) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return AccountStatusUpdateResp_Base_DEFAULT
	}
	return p.Base
}
func (p *AccountStatusUpdateResp) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_AccountStatusUpdateResp = map[int16]string{
	255: "base",
}

func (p *AccountStatusUpdateResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *AccountStatusUpdateResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountStatusUpdateResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AccountStatusUpdateResp[fieldId]))
}

func (p *AccountStatusUpdateResp) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountStatusUpdateResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountStatusUpdateResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountStatusUpdateResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AccountStatusUpdateResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountStatusUpdateResp(%+v)", *p)
}

func (p *AccountStatusUpdateResp) DeepEqual(ano *AccountStatusUpdateResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AccountStatusUpdateResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type LoginRecord struct {
	AccountID string      `thrift:"accountID,1,required" frugal:"1,required,string" json:"accountID"`
	Ipv4      string      `thrift:"ipv4,2,required" frugal:"2,required,string" json:"ipv4"`
	Device    string      `thrift:"device,3,required" frugal:"3,required,string" json:"device"`
	Status    LoginStatus `thrift:"status,4,required" frugal:"4,required,LoginStatus" json:"status"`
	Reason    string      `thrift:"reason,5,required" frugal:"5,required,string" json:"reason"`
	LoginAt   int64       `thrift:"loginAt,6,required" frugal:"6,required,i64" json:"loginAt"`
}

func NewLoginRecord() *LoginRecord {
	return &LoginRecord{}
}

func (p *LoginRecord) InitDefault() {
	*p = LoginRecord{}
}

func (p *LoginRecord) GetAccountID() (v string) {
	return p.AccountID
}

func (p *LoginRecord) GetIpv4() (v string) {
	return p.Ipv4
}

func (p *LoginRecord) GetDevice() (v string) {
	return p.Device
}

func (p *LoginRecord) GetStatus() (v LoginStatus) {
	return p.Status
}

func (p *LoginRecord) GetReason() (v string) {
	return p.Reason
}

func (p *LoginRecord) GetLoginAt() (v int64) {
	return p.LoginAt
}
func (p *LoginRecord) SetAccountID(val string) {
	p.AccountID = val
}
func (p *LoginRecord) SetIpv4(val string) {
	p.Ipv4 = val
}
func (p *LoginRecord) SetDevice(val string) {
	p.Device = val
}
func (p *LoginRecord) SetStatus(val LoginStatus) {
	p.Status = val
}
func (p *LoginRecord) SetReason(val string) {
	p.Reason = val
}
func (p *LoginRecord) SetLoginAt(val int64) {
	p.LoginAt = val
}

var fieldIDToName_LoginRecord = map[int16]string{
	1: "accountID",
	2: "ipv4",
	3: "device",
	4: "status",
	5: "reason",
	6: "loginAt",
}

func (p *LoginRecord) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAccountID bool = false
	var issetIpv4 bool = false
	var issetDevice bool = false
	var issetStatus bool = false
	var issetReason bool = false
	var issetLoginAt bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAccountID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetIpv4 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetDevice = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetReason = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetLoginAt = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAccountID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIpv4 {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetDevice {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetReason {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetLoginAt {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginRecord[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_LoginRecord[fieldId]))
}

func (p *LoginRecord) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountID = v
	}
	return nil
}

func (p *LoginRecord) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Ipv4 = v
	}
	return nil
}

func (p *LoginRecord) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Device = v
	}
	return nil
}

func (p *LoginRecord) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = LoginStatus(v)
	}
	return nil
}

func (p *LoginRecord) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Reason = v
	}
	return nil
}

func (p *LoginRecord) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.LoginAt = v
	}
	return nil
}

func (p *LoginRecord) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginRecord"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ipv4", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Ipv4); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LoginRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("device", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Device); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LoginRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *LoginRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("reason", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Reason); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *LoginRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("loginAt", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LoginAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *LoginRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRecord(%+v)", *p)
}

func (p *LoginRecord) DeepEqual(ano *LoginRecord) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Ipv4) {
		return false
	}
	if !p.Field3DeepEqual(ano.Device) {
		return false
	}
	if !p.Field4DeepEqual(ano.Status) {
		return false
	}
	if !p.Field5DeepEqual(ano.Reason) {
		return false
	}
	if !p.Field6DeepEqual(ano.LoginAt) {
		return false
	}
	return true
}

func (p *LoginRecord) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AccountID, src) != 0 {
		return false
	}
	return true
}
func (p *LoginRecord) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Ipv4, src) != 0 {
		return false
	}
	return true
}
func (p *LoginRecord) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Device, src) != 0 {
		return false
	}
	return true
}
func (p *LoginRecord) Field4DeepEqual(src LoginStatus) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *LoginRecord) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Reason, src) != 0 {
		return false
	}
	return true
}
func (p *LoginRecord) Field6DeepEqual(src int64) bool {

	if p.LoginAt != src {
		return false
	}
	return true
}

type AccountLoginReq struct {
	Username string        `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Password string        `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
	Ipv4     string        `thrift:"ipv4,3,required" frugal:"3,required,string" json:"ipv4"`
	Device   string        `thrift:"device,4,required" frugal:"4,required,string" json:"device"`
	Base     *base.BaseReq `thrift:"base,255,required" frugal:"255,required,base.BaseReq" json:"base"`
}

func NewAccountLoginReq() *AccountLoginReq {
	return &AccountLoginReq{}
}

func (p *AccountLoginReq) InitDefault() {
	*p = AccountLoginReq{}
}

func (p *AccountLoginReq) GetUsername() (v string) {
	return p.Username
}

func (p *AccountLoginReq) GetPassword() (v string) {
	return p.Password
}

func (p *AccountLoginReq) GetIpv4() (v string) {
	return p.Ipv4
}

func (p *AccountLoginReq) GetDevice() (v string) {
	return p.Device
}

var AccountLoginReq_Base_DEFAULT *base.BaseReq

func (p *AccountLoginReq) GetBase() (v *base.BaseReq) {
	if !p.IsSetBase() {
		return AccountLoginReq_Base_DEFAULT
	}
	return p.Base
}
func (p *AccountLoginReq) SetUsername(val string) {
	p.Username = val
}
func (p *AccountLoginReq) SetPassword(val string) {
	p.Password = val
}
func (p *AccountLoginReq) SetIpv4(val string) {
	p.Ipv4 = val
}
func (p *AccountLoginReq) SetDevice(val string) {
	p.Device = val
}
func (p *AccountLoginReq) SetBase(val *base.BaseReq) {
	p.Base = val
}

var fieldIDToName_AccountLoginReq = map[int16]string{
	1:   "username",
	2:   "password",
	3:   "ipv4",
	4:   "device",
	255: "base",
}

func (p *AccountLoginReq) IsSetBase() bool {
	return p.Base != nil
}

func (p *AccountLoginReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUsername bool = false
	var issetPassword bool = false
	var issetIpv4 bool = false
	var issetDevice bool = false
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsername = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetIpv4 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDevice = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUsername {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPassword {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetIpv4 {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDevice {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountLoginReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AccountLoginReq[fieldId]))
}

func (p *AccountLoginReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = v
	}
	return nil
}

func (p *AccountLoginReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = v
	}
	return nil
}

func (p *AccountLoginReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Ipv4 = v
	}
	return nil
}

func (p *AccountLoginReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Device = v
	}
	return nil
}

func (p *AccountLoginReq) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseReq()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountLoginReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountLoginReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountLoginReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Username); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountLoginReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AccountLoginReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ipv4", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Ipv4); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AccountLoginReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("device", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Device); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AccountLoginReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AccountLoginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountLoginReq(%+v)", *p)
}

func (p *AccountLoginReq) DeepEqual(ano *AccountLoginReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	if !p.Field3DeepEqual(ano.Ipv4) {
		return false
	}
	if !p.Field4DeepEqual(ano.Device) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AccountLoginReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *AccountLoginReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}
func (p *AccountLoginReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Ipv4, src) != 0 {
		return false
	}
	return true
}
func (p *AccountLoginReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Device, src) != 0 {
		return false
	}
	return true
}
func (p *AccountLoginReq) Field255DeepEqual(src *base.BaseReq) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AccountLoginResp struct {
	AccountID *string        `thrift:"AccountID,1,optional" frugal:"1,optional,string" json:"AccountID,omitempty"`
	Base      *base.BaseResp `thrift:"base,255,required" frugal:"255,required,base.BaseResp" json:"base"`
}

func NewAccountLoginResp() *AccountLoginResp {
	return &AccountLoginResp{}
}

func (p *AccountLoginResp) InitDefault() {
	*p = AccountLoginResp{}
}

var AccountLoginResp_AccountID_DEFAULT string

func (p *AccountLoginResp) GetAccountID() (v string) {
	if !p.IsSetAccountID() {
		return AccountLoginResp_AccountID_DEFAULT
	}
	return *p.AccountID
}

var AccountLoginResp_Base_DEFAULT *base.BaseResp

func (p *AccountLoginResp) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return AccountLoginResp_Base_DEFAULT
	}
	return p.Base
}
func (p *AccountLoginResp) SetAccountID(val *string) {
	p.AccountID = val
}
func (p *AccountLoginResp) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_AccountLoginResp = map[int16]string{
	1:   "AccountID",
	255: "base",
}

func (p *AccountLoginResp) IsSetAccountID() bool {
	return p.AccountID != nil
}

func (p *AccountLoginResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *AccountLoginResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountLoginResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AccountLoginResp[fieldId]))
}

func (p *AccountLoginResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountID = &v
	}
	return nil
}

func (p *AccountLoginResp) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountLoginResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountLoginResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountLoginResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccountID() {
		if err = oprot.WriteFieldBegin("AccountID", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AccountID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountLoginResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AccountLoginResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountLoginResp(%+v)", *p)
}

func (p *AccountLoginResp) DeepEqual(ano *AccountLoginResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AccountLoginResp) Field1DeepEqual(src *string) bool {

	if p.AccountID == src {
		return true
	} else if p.AccountID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AccountID, *src) != 0 {
		return false
	}
	return true
}
func (p *AccountLoginResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type LoginRecordQueryReq struct {
	AccountID string        `thrift:"accountID,1,required" frugal:"1,required,string" json:"accountID"`
	Page      int64         `thrift:"page,2,required" frugal:"2,required,i64" json:"page"`
	Size      int64         `thrift:"size,3,required" frugal:"3,required,i64" json:"size"`
	Base      *base.BaseReq `thrift:"base,255,required" frugal:"255,required,base.BaseReq" json:"base"`
}

func NewLoginRecordQueryReq() *LoginRecordQueryReq {
	return &LoginRecordQueryReq{}
}

func (p *LoginRecordQueryReq) InitDefault() {
	*p = LoginRecordQueryReq{}
}

func (p *LoginRecordQueryReq) GetAccountID() (v string) {
	return p.AccountID
}

func (p *LoginRecordQueryReq) GetPage() (v int64) {
	return p.Page
}

func (p *LoginRecordQueryReq) GetSize() (v int64) {
	return p.Size
}

var LoginRecordQueryReq_Base_DEFAULT *base.BaseReq

func (p *LoginRecordQueryReq) GetBase() (v *base.BaseReq) {
	if !p.IsSetBase() {
		return LoginRecordQueryReq_Base_DEFAULT
	}
	return p.Base
}
func (p *LoginRecordQueryReq) SetAccountID(val string) {
	p.AccountID = val
}
func (p *LoginRecordQueryReq) SetPage(val int64) {
	p.Page = val
}
func (p *LoginRecordQueryReq) SetSize(val int64) {
	p.Size = val
}
func (p *LoginRecordQueryReq) SetBase(val *base.BaseReq) {
	p.Base = val
}

var fieldIDToName_LoginRecordQueryReq = map[int16]string{
	1:   "accountID",
	2:   "page",
	3:   "size",
	255: "base",
}

func (p *LoginRecordQueryReq) IsSetBase() bool {
	return p.Base != nil
}

func (p *LoginRecordQueryReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAccountID bool = false
	var issetPage bool = false
	var issetSize bool = false
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAccountID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAccountID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPage {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSize {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginRecordQueryReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_LoginRecordQueryReq[fieldId]))
}

func (p *LoginRecordQueryReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountID = v
	}
	return nil
}

func (p *LoginRecordQueryReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Page = v
	}
	return nil
}

func (p *LoginRecordQueryReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Size = v
	}
	return nil
}

func (p *LoginRecordQueryReq) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseReq()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LoginRecordQueryReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginRecordQueryReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginRecordQueryReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginRecordQueryReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Page); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LoginRecordQueryReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("size", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Size); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LoginRecordQueryReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *LoginRecordQueryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRecordQueryReq(%+v)", *p)
}

func (p *LoginRecordQueryReq) DeepEqual(ano *LoginRecordQueryReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Page) {
		return false
	}
	if !p.Field3DeepEqual(ano.Size) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *LoginRecordQueryReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AccountID, src) != 0 {
		return false
	}
	return true
}
func (p *LoginRecordQueryReq) Field2DeepEqual(src int64) bool {

	if p.Page != src {
		return false
	}
	return true
}
func (p *LoginRecordQueryReq) Field3DeepEqual(src int64) bool {

	if p.Size != src {
		return false
	}
	return true
}
func (p *LoginRecordQueryReq) Field255DeepEqual(src *base.BaseReq) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type LoginRecordQueryResp struct {
	RecordList []*LoginRecord `thrift:"recordList,1,optional" frugal:"1,optional,list<LoginRecord>" json:"recordList,omitempty"`
	Page       *int64         `thrift:"page,2,optional" frugal:"2,optional,i64" json:"page,omitempty"`
	Size       *int64         `thrift:"size,3,optional" frugal:"3,optional,i64" json:"size,omitempty"`
	Total      *int64         `thrift:"total,4,optional" frugal:"4,optional,i64" json:"total,omitempty"`
	Base       *base.BaseResp `thrift:"base,255,required" frugal:"255,required,base.BaseResp" json:"base"`
}

func NewLoginRecordQueryResp() *LoginRecordQueryResp {
	return &LoginRecordQueryResp{}
}

func (p *LoginRecordQueryResp) InitDefault() {
	*p = LoginRecordQueryResp{}
}

var LoginRecordQueryResp_RecordList_DEFAULT []*LoginRecord

func (p *LoginRecordQueryResp) GetRecordList() (v []*LoginRecord) {
	if !p.IsSetRecordList() {
		return LoginRecordQueryResp_RecordList_DEFAULT
	}
	return p.RecordList
}

var LoginRecordQueryResp_Page_DEFAULT int64

func (p *LoginRecordQueryResp) GetPage() (v int64) {
	if !p.IsSetPage() {
		return LoginRecordQueryResp_Page_DEFAULT
	}
	return *p.Page
}

var LoginRecordQueryResp_Size_DEFAULT int64

func (p *LoginRecordQueryResp) GetSize() (v int64) {
	if !p.IsSetSize() {
		return LoginRecordQueryResp_Size_DEFAULT
	}
	return *p.Size
}

var LoginRecordQueryResp_Total_DEFAULT int64

func (p *LoginRecordQueryResp) GetTotal() (v int64) {
	if !p.IsSetTotal() {
		return LoginRecordQueryResp_Total_DEFAULT
	}
	return *p.Total
}

var LoginRecordQueryResp_Base_DEFAULT *base.BaseResp

func (p *LoginRecordQueryResp) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return LoginRecordQueryResp_Base_DEFAULT
	}
	return p.Base
}
func (p *LoginRecordQueryResp) SetRecordList(val []*LoginRecord) {
	p.RecordList = val
}
func (p *LoginRecordQueryResp) SetPage(val *int64) {
	p.Page = val
}
func (p *LoginRecordQueryResp) SetSize(val *int64) {
	p.Size = val
}
func (p *LoginRecordQueryResp) SetTotal(val *int64) {
	p.Total = val
}
func (p *LoginRecordQueryResp) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_LoginRecordQueryResp = map[int16]string{
	1:   "recordList",
	2:   "page",
	3:   "size",
	4:   "total",
	255: "base",
}

func (p *LoginRecordQueryResp) IsSetRecordList() bool {
	return p.RecordList != nil
}

func (p *LoginRecordQueryResp) IsSetPage() bool {
	return p.Page != nil
}

func (p *LoginRecordQueryResp) IsSetSize() bool {
	return p.Size != nil
}

func (p *LoginRecordQueryResp) IsSetTotal() bool {
	return p.Total != nil
}

func (p *LoginRecordQueryResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *LoginRecordQueryResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoginRecordQueryResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_LoginRecordQueryResp[fieldId]))
}

func (p *LoginRecordQueryResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.RecordList = make([]*LoginRecord, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLoginRecord()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.RecordList = append(p.RecordList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *LoginRecordQueryResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Page = &v
	}
	return nil
}

func (p *LoginRecordQueryResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Size = &v
	}
	return nil
}

func (p *LoginRecordQueryResp) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = &v
	}
	return nil
}

func (p *LoginRecordQueryResp) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LoginRecordQueryResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginRecordQueryResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoginRecordQueryResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecordList() {
		if err = oprot.WriteFieldBegin("recordList", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecordList)); err != nil {
			return err
		}
		for _, v := range p.RecordList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoginRecordQueryResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LoginRecordQueryResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err = oprot.WriteFieldBegin("size", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Size); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LoginRecordQueryResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *LoginRecordQueryResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *LoginRecordQueryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRecordQueryResp(%+v)", *p)
}

func (p *LoginRecordQueryResp) DeepEqual(ano *LoginRecordQueryResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RecordList) {
		return false
	}
	if !p.Field2DeepEqual(ano.Page) {
		return false
	}
	if !p.Field3DeepEqual(ano.Size) {
		return false
	}
	if !p.Field4DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *LoginRecordQueryResp) Field1DeepEqual(src []*LoginRecord) bool {

	if len(p.RecordList) != len(src) {
		return false
	}
	for i, v := range p.RecordList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *LoginRecordQueryResp) Field2DeepEqual(src *int64) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *LoginRecordQueryResp) Field3DeepEqual(src *int64) bool {

	if p.Size == src {
		return true
	} else if p.Size == nil || src == nil {
		return false
	}
	if *p.Size != *src {
		return false
	}
	return true
}
func (p *LoginRecordQueryResp) Field4DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *LoginRecordQueryResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type User struct {
	AccountID   string `thrift:"accountID,1,required" frugal:"1,required,string" json:"accountID"`
	UserID      string `thrift:"userID,2,required" frugal:"2,required,string" json:"userID"`
	Name        string `thrift:"name,3,required" frugal:"3,required,string" json:"name"`
	Gender      Gender `thrift:"gender,4,required" frugal:"4,required,Gender" json:"gender"`
	Phone       string `thrift:"phone,5,required" frugal:"5,required,string" json:"phone"`
	Email       string `thrift:"email,6,required" frugal:"6,required,string" json:"email"`
	Description string `thrift:"description,7,required" frugal:"7,required,string" json:"description"`
	CreatedAt   int64  `thrift:"createdAt,200,required" frugal:"200,required,i64" json:"createdAt"`
	UpdatedAt   int64  `thrift:"updatedAt,201,required" frugal:"201,required,i64" json:"updatedAt"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
	*p = User{}
}

func (p *User) GetAccountID() (v string) {
	return p.AccountID
}

func (p *User) GetUserID() (v string) {
	return p.UserID
}

func (p *User) GetName() (v string) {
	return p.Name
}

func (p *User) GetGender() (v Gender) {
	return p.Gender
}

func (p *User) GetPhone() (v string) {
	return p.Phone
}

func (p *User) GetEmail() (v string) {
	return p.Email
}

func (p *User) GetDescription() (v string) {
	return p.Description
}

func (p *User) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *User) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}
func (p *User) SetAccountID(val string) {
	p.AccountID = val
}
func (p *User) SetUserID(val string) {
	p.UserID = val
}
func (p *User) SetName(val string) {
	p.Name = val
}
func (p *User) SetGender(val Gender) {
	p.Gender = val
}
func (p *User) SetPhone(val string) {
	p.Phone = val
}
func (p *User) SetEmail(val string) {
	p.Email = val
}
func (p *User) SetDescription(val string) {
	p.Description = val
}
func (p *User) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *User) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}

var fieldIDToName_User = map[int16]string{
	1:   "accountID",
	2:   "userID",
	3:   "name",
	4:   "gender",
	5:   "phone",
	6:   "email",
	7:   "description",
	200: "createdAt",
	201: "updatedAt",
}

func (p *User) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAccountID bool = false
	var issetUserID bool = false
	var issetName bool = false
	var issetGender bool = false
	var issetPhone bool = false
	var issetEmail bool = false
	var issetDescription bool = false
	var issetCreatedAt bool = false
	var issetUpdatedAt bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAccountID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetGender = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetPhone = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetEmail = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 200:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField200(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreatedAt = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 201:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField201(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdatedAt = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAccountID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUserID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetGender {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetPhone {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetEmail {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetCreatedAt {
		fieldId = 200
		goto RequiredFieldNotSetError
	}

	if !issetUpdatedAt {
		fieldId = 201
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_User[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_User[fieldId]))
}

func (p *User) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountID = v
	}
	return nil
}

func (p *User) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserID = v
	}
	return nil
}

func (p *User) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *User) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Gender = Gender(v)
	}
	return nil
}

func (p *User) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Phone = v
	}
	return nil
}

func (p *User) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Email = v
	}
	return nil
}

func (p *User) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *User) ReadField200(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CreatedAt = v
	}
	return nil
}

func (p *User) ReadField201(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UpdatedAt = v
	}
	return nil
}

func (p *User) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("User"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField200(oprot); err != nil {
			fieldId = 200
			goto WriteFieldError
		}
		if err = p.writeField201(oprot); err != nil {
			fieldId = 201
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("userID", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gender", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Gender)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *User) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("phone", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Phone); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *User) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("email", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Email); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *User) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *User) writeField200(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createdAt", thrift.I64, 200); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 end error: ", p), err)
}

func (p *User) writeField201(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updatedAt", thrift.I64, 201); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 201 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 201 end error: ", p), err)
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

func (p *User) DeepEqual(ano *User) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountID) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field5DeepEqual(ano.Phone) {
		return false
	}
	if !p.Field6DeepEqual(ano.Email) {
		return false
	}
	if !p.Field7DeepEqual(ano.Description) {
		return false
	}
	if !p.Field200DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field201DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *User) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AccountID, src) != 0 {
		return false
	}
	return true
}
func (p *User) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UserID, src) != 0 {
		return false
	}
	return true
}
func (p *User) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *User) Field4DeepEqual(src Gender) bool {

	if p.Gender != src {
		return false
	}
	return true
}
func (p *User) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Phone, src) != 0 {
		return false
	}
	return true
}
func (p *User) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *User) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *User) Field200DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *User) Field201DeepEqual(src int64) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}

type UserCreateReq struct {
	AccountID   string         `thrift:"accountID,1,required" frugal:"1,required,string" json:"accountID"`
	Name        string         `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	Gender      Gender         `thrift:"gender,3,required" frugal:"3,required,Gender" json:"gender"`
	Phone       string         `thrift:"phone,4,required" frugal:"4,required,string" json:"phone"`
	Email       string         `thrift:"email,5,required" frugal:"5,required,string" json:"email"`
	Description string         `thrift:"description,6,required" frugal:"6,required,string" json:"description"`
	Base        *base.BaseResp `thrift:"base,255,required" frugal:"255,required,base.BaseResp" json:"base"`
}

func NewUserCreateReq() *UserCreateReq {
	return &UserCreateReq{}
}

func (p *UserCreateReq) InitDefault() {
	*p = UserCreateReq{}
}

func (p *UserCreateReq) GetAccountID() (v string) {
	return p.AccountID
}

func (p *UserCreateReq) GetName() (v string) {
	return p.Name
}

func (p *UserCreateReq) GetGender() (v Gender) {
	return p.Gender
}

func (p *UserCreateReq) GetPhone() (v string) {
	return p.Phone
}

func (p *UserCreateReq) GetEmail() (v string) {
	return p.Email
}

func (p *UserCreateReq) GetDescription() (v string) {
	return p.Description
}

var UserCreateReq_Base_DEFAULT *base.BaseResp

func (p *UserCreateReq) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return UserCreateReq_Base_DEFAULT
	}
	return p.Base
}
func (p *UserCreateReq) SetAccountID(val string) {
	p.AccountID = val
}
func (p *UserCreateReq) SetName(val string) {
	p.Name = val
}
func (p *UserCreateReq) SetGender(val Gender) {
	p.Gender = val
}
func (p *UserCreateReq) SetPhone(val string) {
	p.Phone = val
}
func (p *UserCreateReq) SetEmail(val string) {
	p.Email = val
}
func (p *UserCreateReq) SetDescription(val string) {
	p.Description = val
}
func (p *UserCreateReq) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_UserCreateReq = map[int16]string{
	1:   "accountID",
	2:   "name",
	3:   "gender",
	4:   "phone",
	5:   "email",
	6:   "description",
	255: "base",
}

func (p *UserCreateReq) IsSetBase() bool {
	return p.Base != nil
}

func (p *UserCreateReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAccountID bool = false
	var issetName bool = false
	var issetGender bool = false
	var issetPhone bool = false
	var issetEmail bool = false
	var issetDescription bool = false
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAccountID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetGender = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPhone = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetEmail = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAccountID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetGender {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPhone {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetEmail {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserCreateReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UserCreateReq[fieldId]))
}

func (p *UserCreateReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountID = v
	}
	return nil
}

func (p *UserCreateReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *UserCreateReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Gender = Gender(v)
	}
	return nil
}

func (p *UserCreateReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Phone = v
	}
	return nil
}

func (p *UserCreateReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Email = v
	}
	return nil
}

func (p *UserCreateReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *UserCreateReq) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserCreateReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserCreateReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserCreateReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserCreateReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UserCreateReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gender", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Gender)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UserCreateReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("phone", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Phone); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UserCreateReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("email", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Email); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UserCreateReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UserCreateReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UserCreateReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCreateReq(%+v)", *p)
}

func (p *UserCreateReq) DeepEqual(ano *UserCreateReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field4DeepEqual(ano.Phone) {
		return false
	}
	if !p.Field5DeepEqual(ano.Email) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UserCreateReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AccountID, src) != 0 {
		return false
	}
	return true
}
func (p *UserCreateReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UserCreateReq) Field3DeepEqual(src Gender) bool {

	if p.Gender != src {
		return false
	}
	return true
}
func (p *UserCreateReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Phone, src) != 0 {
		return false
	}
	return true
}
func (p *UserCreateReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *UserCreateReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *UserCreateReq) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UserCreateResp struct {
	UserID *string        `thrift:"userID,1,optional" frugal:"1,optional,string" json:"userID,omitempty"`
	Base   *base.BaseResp `thrift:"base,255,required" frugal:"255,required,base.BaseResp" json:"base"`
}

func NewUserCreateResp() *UserCreateResp {
	return &UserCreateResp{}
}

func (p *UserCreateResp) InitDefault() {
	*p = UserCreateResp{}
}

var UserCreateResp_UserID_DEFAULT string

func (p *UserCreateResp) GetUserID() (v string) {
	if !p.IsSetUserID() {
		return UserCreateResp_UserID_DEFAULT
	}
	return *p.UserID
}

var UserCreateResp_Base_DEFAULT *base.BaseResp

func (p *UserCreateResp) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return UserCreateResp_Base_DEFAULT
	}
	return p.Base
}
func (p *UserCreateResp) SetUserID(val *string) {
	p.UserID = val
}
func (p *UserCreateResp) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_UserCreateResp = map[int16]string{
	1:   "userID",
	255: "base",
}

func (p *UserCreateResp) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *UserCreateResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *UserCreateResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserCreateResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UserCreateResp[fieldId]))
}

func (p *UserCreateResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *UserCreateResp) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserCreateResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserCreateResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserCreateResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("userID", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserCreateResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UserCreateResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCreateResp(%+v)", *p)
}

func (p *UserCreateResp) DeepEqual(ano *UserCreateResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UserCreateResp) Field1DeepEqual(src *string) bool {

	if p.UserID == src {
		return true
	} else if p.UserID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserID, *src) != 0 {
		return false
	}
	return true
}
func (p *UserCreateResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UserQueryReq struct {
	UserID    *string       `thrift:"userID,1,optional" frugal:"1,optional,string" json:"userID,omitempty"`
	AccountID *string       `thrift:"accountID,2,optional" frugal:"2,optional,string" json:"accountID,omitempty"`
	Base      *base.BaseReq `thrift:"base,255,required" frugal:"255,required,base.BaseReq" json:"base"`
}

func NewUserQueryReq() *UserQueryReq {
	return &UserQueryReq{}
}

func (p *UserQueryReq) InitDefault() {
	*p = UserQueryReq{}
}

var UserQueryReq_UserID_DEFAULT string

func (p *UserQueryReq) GetUserID() (v string) {
	if !p.IsSetUserID() {
		return UserQueryReq_UserID_DEFAULT
	}
	return *p.UserID
}

var UserQueryReq_AccountID_DEFAULT string

func (p *UserQueryReq) GetAccountID() (v string) {
	if !p.IsSetAccountID() {
		return UserQueryReq_AccountID_DEFAULT
	}
	return *p.AccountID
}

var UserQueryReq_Base_DEFAULT *base.BaseReq

func (p *UserQueryReq) GetBase() (v *base.BaseReq) {
	if !p.IsSetBase() {
		return UserQueryReq_Base_DEFAULT
	}
	return p.Base
}
func (p *UserQueryReq) SetUserID(val *string) {
	p.UserID = val
}
func (p *UserQueryReq) SetAccountID(val *string) {
	p.AccountID = val
}
func (p *UserQueryReq) SetBase(val *base.BaseReq) {
	p.Base = val
}

var fieldIDToName_UserQueryReq = map[int16]string{
	1:   "userID",
	2:   "accountID",
	255: "base",
}

func (p *UserQueryReq) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *UserQueryReq) IsSetAccountID() bool {
	return p.AccountID != nil
}

func (p *UserQueryReq) IsSetBase() bool {
	return p.Base != nil
}

func (p *UserQueryReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserQueryReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UserQueryReq[fieldId]))
}

func (p *UserQueryReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *UserQueryReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountID = &v
	}
	return nil
}

func (p *UserQueryReq) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseReq()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserQueryReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserQueryReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserQueryReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("userID", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserQueryReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccountID() {
		if err = oprot.WriteFieldBegin("accountID", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AccountID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UserQueryReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UserQueryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserQueryReq(%+v)", *p)
}

func (p *UserQueryReq) DeepEqual(ano *UserQueryReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AccountID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UserQueryReq) Field1DeepEqual(src *string) bool {

	if p.UserID == src {
		return true
	} else if p.UserID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserID, *src) != 0 {
		return false
	}
	return true
}
func (p *UserQueryReq) Field2DeepEqual(src *string) bool {

	if p.AccountID == src {
		return true
	} else if p.AccountID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AccountID, *src) != 0 {
		return false
	}
	return true
}
func (p *UserQueryReq) Field255DeepEqual(src *base.BaseReq) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UserQueryResp struct {
	User *User          `thrift:"user,1,optional" frugal:"1,optional,User" json:"user,omitempty"`
	Base *base.BaseResp `thrift:"base,255,required" frugal:"255,required,base.BaseResp" json:"base"`
}

func NewUserQueryResp() *UserQueryResp {
	return &UserQueryResp{}
}

func (p *UserQueryResp) InitDefault() {
	*p = UserQueryResp{}
}

var UserQueryResp_User_DEFAULT *User

func (p *UserQueryResp) GetUser() (v *User) {
	if !p.IsSetUser() {
		return UserQueryResp_User_DEFAULT
	}
	return p.User
}

var UserQueryResp_Base_DEFAULT *base.BaseResp

func (p *UserQueryResp) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return UserQueryResp_Base_DEFAULT
	}
	return p.Base
}
func (p *UserQueryResp) SetUser(val *User) {
	p.User = val
}
func (p *UserQueryResp) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_UserQueryResp = map[int16]string{
	1:   "user",
	255: "base",
}

func (p *UserQueryResp) IsSetUser() bool {
	return p.User != nil
}

func (p *UserQueryResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *UserQueryResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserQueryResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UserQueryResp[fieldId]))
}

func (p *UserQueryResp) ReadField1(iprot thrift.TProtocol) error {
	p.User = NewUser()
	if err := p.User.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserQueryResp) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserQueryResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserQueryResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserQueryResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.User.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserQueryResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UserQueryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserQueryResp(%+v)", *p)
}

func (p *UserQueryResp) DeepEqual(ano *UserQueryResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.User) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UserQueryResp) Field1DeepEqual(src *User) bool {

	if !p.User.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UserQueryResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UserUpdateReq struct {
	UserID      string        `thrift:"userID,1,required" frugal:"1,required,string" json:"userID"`
	Name        *string       `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Gender      *Gender       `thrift:"gender,3,optional" frugal:"3,optional,Gender" json:"gender,omitempty"`
	Phone       *string       `thrift:"phone,4,optional" frugal:"4,optional,string" json:"phone,omitempty"`
	Email       *string       `thrift:"email,5,optional" frugal:"5,optional,string" json:"email,omitempty"`
	Description *string       `thrift:"description,6,optional" frugal:"6,optional,string" json:"description,omitempty"`
	Base        *base.BaseReq `thrift:"base,255,required" frugal:"255,required,base.BaseReq" json:"base"`
}

func NewUserUpdateReq() *UserUpdateReq {
	return &UserUpdateReq{}
}

func (p *UserUpdateReq) InitDefault() {
	*p = UserUpdateReq{}
}

func (p *UserUpdateReq) GetUserID() (v string) {
	return p.UserID
}

var UserUpdateReq_Name_DEFAULT string

func (p *UserUpdateReq) GetName() (v string) {
	if !p.IsSetName() {
		return UserUpdateReq_Name_DEFAULT
	}
	return *p.Name
}

var UserUpdateReq_Gender_DEFAULT Gender

func (p *UserUpdateReq) GetGender() (v Gender) {
	if !p.IsSetGender() {
		return UserUpdateReq_Gender_DEFAULT
	}
	return *p.Gender
}

var UserUpdateReq_Phone_DEFAULT string

func (p *UserUpdateReq) GetPhone() (v string) {
	if !p.IsSetPhone() {
		return UserUpdateReq_Phone_DEFAULT
	}
	return *p.Phone
}

var UserUpdateReq_Email_DEFAULT string

func (p *UserUpdateReq) GetEmail() (v string) {
	if !p.IsSetEmail() {
		return UserUpdateReq_Email_DEFAULT
	}
	return *p.Email
}

var UserUpdateReq_Description_DEFAULT string

func (p *UserUpdateReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return UserUpdateReq_Description_DEFAULT
	}
	return *p.Description
}

var UserUpdateReq_Base_DEFAULT *base.BaseReq

func (p *UserUpdateReq) GetBase() (v *base.BaseReq) {
	if !p.IsSetBase() {
		return UserUpdateReq_Base_DEFAULT
	}
	return p.Base
}
func (p *UserUpdateReq) SetUserID(val string) {
	p.UserID = val
}
func (p *UserUpdateReq) SetName(val *string) {
	p.Name = val
}
func (p *UserUpdateReq) SetGender(val *Gender) {
	p.Gender = val
}
func (p *UserUpdateReq) SetPhone(val *string) {
	p.Phone = val
}
func (p *UserUpdateReq) SetEmail(val *string) {
	p.Email = val
}
func (p *UserUpdateReq) SetDescription(val *string) {
	p.Description = val
}
func (p *UserUpdateReq) SetBase(val *base.BaseReq) {
	p.Base = val
}

var fieldIDToName_UserUpdateReq = map[int16]string{
	1:   "userID",
	2:   "name",
	3:   "gender",
	4:   "phone",
	5:   "email",
	6:   "description",
	255: "base",
}

func (p *UserUpdateReq) IsSetName() bool {
	return p.Name != nil
}

func (p *UserUpdateReq) IsSetGender() bool {
	return p.Gender != nil
}

func (p *UserUpdateReq) IsSetPhone() bool {
	return p.Phone != nil
}

func (p *UserUpdateReq) IsSetEmail() bool {
	return p.Email != nil
}

func (p *UserUpdateReq) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UserUpdateReq) IsSetBase() bool {
	return p.Base != nil
}

func (p *UserUpdateReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserID bool = false
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserUpdateReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UserUpdateReq[fieldId]))
}

func (p *UserUpdateReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserUpdateReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *UserUpdateReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := Gender(v)
		p.Gender = &tmp
	}
	return nil
}

func (p *UserUpdateReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Phone = &v
	}
	return nil
}

func (p *UserUpdateReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Email = &v
	}
	return nil
}

func (p *UserUpdateReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = &v
	}
	return nil
}

func (p *UserUpdateReq) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseReq()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserUpdateReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserUpdateReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserUpdateReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("userID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserUpdateReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UserUpdateReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGender() {
		if err = oprot.WriteFieldBegin("gender", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Gender)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UserUpdateReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhone() {
		if err = oprot.WriteFieldBegin("phone", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Phone); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UserUpdateReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err = oprot.WriteFieldBegin("email", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Email); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UserUpdateReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UserUpdateReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UserUpdateReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserUpdateReq(%+v)", *p)
}

func (p *UserUpdateReq) DeepEqual(ano *UserUpdateReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field4DeepEqual(ano.Phone) {
		return false
	}
	if !p.Field5DeepEqual(ano.Email) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UserUpdateReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserID, src) != 0 {
		return false
	}
	return true
}
func (p *UserUpdateReq) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UserUpdateReq) Field3DeepEqual(src *Gender) bool {

	if p.Gender == src {
		return true
	} else if p.Gender == nil || src == nil {
		return false
	}
	if *p.Gender != *src {
		return false
	}
	return true
}
func (p *UserUpdateReq) Field4DeepEqual(src *string) bool {

	if p.Phone == src {
		return true
	} else if p.Phone == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Phone, *src) != 0 {
		return false
	}
	return true
}
func (p *UserUpdateReq) Field5DeepEqual(src *string) bool {

	if p.Email == src {
		return true
	} else if p.Email == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Email, *src) != 0 {
		return false
	}
	return true
}
func (p *UserUpdateReq) Field6DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *UserUpdateReq) Field255DeepEqual(src *base.BaseReq) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UserUpdateResp struct {
	Base *base.BaseResp `thrift:"base,255,required" frugal:"255,required,base.BaseResp" json:"base"`
}

func NewUserUpdateResp() *UserUpdateResp {
	return &UserUpdateResp{}
}

func (p *UserUpdateResp) InitDefault() {
	*p = UserUpdateResp{}
}

var UserUpdateResp_Base_DEFAULT *base.BaseResp

func (p *UserUpdateResp) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return UserUpdateResp_Base_DEFAULT
	}
	return p.Base
}
func (p *UserUpdateResp) SetBase(val *base.BaseResp) {
	p.Base = val
}

var fieldIDToName_UserUpdateResp = map[int16]string{
	255: "base",
}

func (p *UserUpdateResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *UserUpdateResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBase bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBase {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserUpdateResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UserUpdateResp[fieldId]))
}

func (p *UserUpdateResp) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResp()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UserUpdateResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserUpdateResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserUpdateResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UserUpdateResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserUpdateResp(%+v)", *p)
}

func (p *UserUpdateResp) DeepEqual(ano *UserUpdateResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UserUpdateResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AccountService interface {
	QueryAccount(ctx context.Context, req *AccountQueryReq) (r *AccountQueryResp, err error)

	CreateAccount(ctx context.Context, req *AccountCreateReq) (r *AccountCreateResp, err error)

	UpdateAccountPassword(ctx context.Context, req *AccountPasswordUpdateReq) (r *AccountPasswordUpdateResp, err error)

	ResetAccountPassword(ctx context.Context, req *AccountPasswordResetReq) (r *AccountPasswordResetResp, err error)

	UpdateAccountStatus(ctx context.Context, req *AccountStatusUpdateReq) (r *AccountStatusUpdateResp, err error)

	Login(ctx context.Context, req *AccountLoginReq) (r *AccountLoginResp, err error)

	QueryLoginRecord(ctx context.Context, req *LoginRecordQueryReq) (r *LoginRecordQueryResp, err error)

	CreateUser(ctx context.Context, req *UserCreateReq) (r *UserCreateResp, err error)

	QueryUser(ctx context.Context, req *UserQueryReq) (r *UserQueryResp, err error)

	UpdateUser(ctx context.Context, req *UserUpdateReq) (r *UserUpdateResp, err error)
}

type AccountServiceClient struct {
	c thrift.TClient
}

func NewAccountServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AccountServiceClient {
	return &AccountServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewAccountServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AccountServiceClient {
	return &AccountServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewAccountServiceClient(c thrift.TClient) *AccountServiceClient {
	return &AccountServiceClient{
		c: c,
	}
}

func (p *AccountServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *AccountServiceClient) QueryAccount(ctx context.Context, req *AccountQueryReq) (r *AccountQueryResp, err error) {
	var _args AccountServiceQueryAccountArgs
	_args.Req = req
	var _result AccountServiceQueryAccountResult
	if err = p.Client_().Call(ctx, "QueryAccount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AccountServiceClient) CreateAccount(ctx context.Context, req *AccountCreateReq) (r *AccountCreateResp, err error) {
	var _args AccountServiceCreateAccountArgs
	_args.Req = req
	var _result AccountServiceCreateAccountResult
	if err = p.Client_().Call(ctx, "CreateAccount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AccountServiceClient) UpdateAccountPassword(ctx context.Context, req *AccountPasswordUpdateReq) (r *AccountPasswordUpdateResp, err error) {
	var _args AccountServiceUpdateAccountPasswordArgs
	_args.Req = req
	var _result AccountServiceUpdateAccountPasswordResult
	if err = p.Client_().Call(ctx, "UpdateAccountPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AccountServiceClient) ResetAccountPassword(ctx context.Context, req *AccountPasswordResetReq) (r *AccountPasswordResetResp, err error) {
	var _args AccountServiceResetAccountPasswordArgs
	_args.Req = req
	var _result AccountServiceResetAccountPasswordResult
	if err = p.Client_().Call(ctx, "ResetAccountPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AccountServiceClient) UpdateAccountStatus(ctx context.Context, req *AccountStatusUpdateReq) (r *AccountStatusUpdateResp, err error) {
	var _args AccountServiceUpdateAccountStatusArgs
	_args.Req = req
	var _result AccountServiceUpdateAccountStatusResult
	if err = p.Client_().Call(ctx, "UpdateAccountStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AccountServiceClient) Login(ctx context.Context, req *AccountLoginReq) (r *AccountLoginResp, err error) {
	var _args AccountServiceLoginArgs
	_args.Req = req
	var _result AccountServiceLoginResult
	if err = p.Client_().Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AccountServiceClient) QueryLoginRecord(ctx context.Context, req *LoginRecordQueryReq) (r *LoginRecordQueryResp, err error) {
	var _args AccountServiceQueryLoginRecordArgs
	_args.Req = req
	var _result AccountServiceQueryLoginRecordResult
	if err = p.Client_().Call(ctx, "QueryLoginRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AccountServiceClient) CreateUser(ctx context.Context, req *UserCreateReq) (r *UserCreateResp, err error) {
	var _args AccountServiceCreateUserArgs
	_args.Req = req
	var _result AccountServiceCreateUserResult
	if err = p.Client_().Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AccountServiceClient) QueryUser(ctx context.Context, req *UserQueryReq) (r *UserQueryResp, err error) {
	var _args AccountServiceQueryUserArgs
	_args.Req = req
	var _result AccountServiceQueryUserResult
	if err = p.Client_().Call(ctx, "QueryUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AccountServiceClient) UpdateUser(ctx context.Context, req *UserUpdateReq) (r *UserUpdateResp, err error) {
	var _args AccountServiceUpdateUserArgs
	_args.Req = req
	var _result AccountServiceUpdateUserResult
	if err = p.Client_().Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type AccountServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AccountService
}

func (p *AccountServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AccountServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AccountServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAccountServiceProcessor(handler AccountService) *AccountServiceProcessor {
	self := &AccountServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("QueryAccount", &accountServiceProcessorQueryAccount{handler: handler})
	self.AddToProcessorMap("CreateAccount", &accountServiceProcessorCreateAccount{handler: handler})
	self.AddToProcessorMap("UpdateAccountPassword", &accountServiceProcessorUpdateAccountPassword{handler: handler})
	self.AddToProcessorMap("ResetAccountPassword", &accountServiceProcessorResetAccountPassword{handler: handler})
	self.AddToProcessorMap("UpdateAccountStatus", &accountServiceProcessorUpdateAccountStatus{handler: handler})
	self.AddToProcessorMap("Login", &accountServiceProcessorLogin{handler: handler})
	self.AddToProcessorMap("QueryLoginRecord", &accountServiceProcessorQueryLoginRecord{handler: handler})
	self.AddToProcessorMap("CreateUser", &accountServiceProcessorCreateUser{handler: handler})
	self.AddToProcessorMap("QueryUser", &accountServiceProcessorQueryUser{handler: handler})
	self.AddToProcessorMap("UpdateUser", &accountServiceProcessorUpdateUser{handler: handler})
	return self
}
func (p *AccountServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type accountServiceProcessorQueryAccount struct {
	handler AccountService
}

func (p *accountServiceProcessorQueryAccount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceQueryAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AccountServiceQueryAccountResult{}
	var retval *AccountQueryResp
	if retval, err2 = p.handler.QueryAccount(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryAccount: "+err2.Error())
		oprot.WriteMessageBegin("QueryAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accountServiceProcessorCreateAccount struct {
	handler AccountService
}

func (p *accountServiceProcessorCreateAccount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceCreateAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AccountServiceCreateAccountResult{}
	var retval *AccountCreateResp
	if retval, err2 = p.handler.CreateAccount(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateAccount: "+err2.Error())
		oprot.WriteMessageBegin("CreateAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accountServiceProcessorUpdateAccountPassword struct {
	handler AccountService
}

func (p *accountServiceProcessorUpdateAccountPassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceUpdateAccountPasswordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateAccountPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AccountServiceUpdateAccountPasswordResult{}
	var retval *AccountPasswordUpdateResp
	if retval, err2 = p.handler.UpdateAccountPassword(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateAccountPassword: "+err2.Error())
		oprot.WriteMessageBegin("UpdateAccountPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateAccountPassword", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accountServiceProcessorResetAccountPassword struct {
	handler AccountService
}

func (p *accountServiceProcessorResetAccountPassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceResetAccountPasswordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ResetAccountPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AccountServiceResetAccountPasswordResult{}
	var retval *AccountPasswordResetResp
	if retval, err2 = p.handler.ResetAccountPassword(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResetAccountPassword: "+err2.Error())
		oprot.WriteMessageBegin("ResetAccountPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ResetAccountPassword", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accountServiceProcessorUpdateAccountStatus struct {
	handler AccountService
}

func (p *accountServiceProcessorUpdateAccountStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceUpdateAccountStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateAccountStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AccountServiceUpdateAccountStatusResult{}
	var retval *AccountStatusUpdateResp
	if retval, err2 = p.handler.UpdateAccountStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateAccountStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateAccountStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateAccountStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accountServiceProcessorLogin struct {
	handler AccountService
}

func (p *accountServiceProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Login", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AccountServiceLoginResult{}
	var retval *AccountLoginResp
	if retval, err2 = p.handler.Login(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Login: "+err2.Error())
		oprot.WriteMessageBegin("Login", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Login", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accountServiceProcessorQueryLoginRecord struct {
	handler AccountService
}

func (p *accountServiceProcessorQueryLoginRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceQueryLoginRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryLoginRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AccountServiceQueryLoginRecordResult{}
	var retval *LoginRecordQueryResp
	if retval, err2 = p.handler.QueryLoginRecord(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryLoginRecord: "+err2.Error())
		oprot.WriteMessageBegin("QueryLoginRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryLoginRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accountServiceProcessorCreateUser struct {
	handler AccountService
}

func (p *accountServiceProcessorCreateUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceCreateUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AccountServiceCreateUserResult{}
	var retval *UserCreateResp
	if retval, err2 = p.handler.CreateUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateUser: "+err2.Error())
		oprot.WriteMessageBegin("CreateUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accountServiceProcessorQueryUser struct {
	handler AccountService
}

func (p *accountServiceProcessorQueryUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceQueryUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AccountServiceQueryUserResult{}
	var retval *UserQueryResp
	if retval, err2 = p.handler.QueryUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryUser: "+err2.Error())
		oprot.WriteMessageBegin("QueryUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accountServiceProcessorUpdateUser struct {
	handler AccountService
}

func (p *accountServiceProcessorUpdateUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccountServiceUpdateUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AccountServiceUpdateUserResult{}
	var retval *UserUpdateResp
	if retval, err2 = p.handler.UpdateUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateUser: "+err2.Error())
		oprot.WriteMessageBegin("UpdateUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type AccountServiceQueryAccountArgs struct {
	Req *AccountQueryReq `thrift:"req,1" frugal:"1,default,AccountQueryReq" json:"req"`
}

func NewAccountServiceQueryAccountArgs() *AccountServiceQueryAccountArgs {
	return &AccountServiceQueryAccountArgs{}
}

func (p *AccountServiceQueryAccountArgs) InitDefault() {
	*p = AccountServiceQueryAccountArgs{}
}

var AccountServiceQueryAccountArgs_Req_DEFAULT *AccountQueryReq

func (p *AccountServiceQueryAccountArgs) GetReq() (v *AccountQueryReq) {
	if !p.IsSetReq() {
		return AccountServiceQueryAccountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AccountServiceQueryAccountArgs) SetReq(val *AccountQueryReq) {
	p.Req = val
}

var fieldIDToName_AccountServiceQueryAccountArgs = map[int16]string{
	1: "req",
}

func (p *AccountServiceQueryAccountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AccountServiceQueryAccountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceQueryAccountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceQueryAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAccountQueryReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceQueryAccountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAccount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceQueryAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountServiceQueryAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceQueryAccountArgs(%+v)", *p)
}

func (p *AccountServiceQueryAccountArgs) DeepEqual(ano *AccountServiceQueryAccountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AccountServiceQueryAccountArgs) Field1DeepEqual(src *AccountQueryReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceQueryAccountResult struct {
	Success *AccountQueryResp `thrift:"success,0,optional" frugal:"0,optional,AccountQueryResp" json:"success,omitempty"`
}

func NewAccountServiceQueryAccountResult() *AccountServiceQueryAccountResult {
	return &AccountServiceQueryAccountResult{}
}

func (p *AccountServiceQueryAccountResult) InitDefault() {
	*p = AccountServiceQueryAccountResult{}
}

var AccountServiceQueryAccountResult_Success_DEFAULT *AccountQueryResp

func (p *AccountServiceQueryAccountResult) GetSuccess() (v *AccountQueryResp) {
	if !p.IsSetSuccess() {
		return AccountServiceQueryAccountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccountServiceQueryAccountResult) SetSuccess(x interface{}) {
	p.Success = x.(*AccountQueryResp)
}

var fieldIDToName_AccountServiceQueryAccountResult = map[int16]string{
	0: "success",
}

func (p *AccountServiceQueryAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceQueryAccountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceQueryAccountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceQueryAccountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAccountQueryResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceQueryAccountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAccount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceQueryAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AccountServiceQueryAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceQueryAccountResult(%+v)", *p)
}

func (p *AccountServiceQueryAccountResult) DeepEqual(ano *AccountServiceQueryAccountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AccountServiceQueryAccountResult) Field0DeepEqual(src *AccountQueryResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceCreateAccountArgs struct {
	Req *AccountCreateReq `thrift:"req,1" frugal:"1,default,AccountCreateReq" json:"req"`
}

func NewAccountServiceCreateAccountArgs() *AccountServiceCreateAccountArgs {
	return &AccountServiceCreateAccountArgs{}
}

func (p *AccountServiceCreateAccountArgs) InitDefault() {
	*p = AccountServiceCreateAccountArgs{}
}

var AccountServiceCreateAccountArgs_Req_DEFAULT *AccountCreateReq

func (p *AccountServiceCreateAccountArgs) GetReq() (v *AccountCreateReq) {
	if !p.IsSetReq() {
		return AccountServiceCreateAccountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AccountServiceCreateAccountArgs) SetReq(val *AccountCreateReq) {
	p.Req = val
}

var fieldIDToName_AccountServiceCreateAccountArgs = map[int16]string{
	1: "req",
}

func (p *AccountServiceCreateAccountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AccountServiceCreateAccountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceCreateAccountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceCreateAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAccountCreateReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceCreateAccountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAccount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceCreateAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountServiceCreateAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceCreateAccountArgs(%+v)", *p)
}

func (p *AccountServiceCreateAccountArgs) DeepEqual(ano *AccountServiceCreateAccountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AccountServiceCreateAccountArgs) Field1DeepEqual(src *AccountCreateReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceCreateAccountResult struct {
	Success *AccountCreateResp `thrift:"success,0,optional" frugal:"0,optional,AccountCreateResp" json:"success,omitempty"`
}

func NewAccountServiceCreateAccountResult() *AccountServiceCreateAccountResult {
	return &AccountServiceCreateAccountResult{}
}

func (p *AccountServiceCreateAccountResult) InitDefault() {
	*p = AccountServiceCreateAccountResult{}
}

var AccountServiceCreateAccountResult_Success_DEFAULT *AccountCreateResp

func (p *AccountServiceCreateAccountResult) GetSuccess() (v *AccountCreateResp) {
	if !p.IsSetSuccess() {
		return AccountServiceCreateAccountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccountServiceCreateAccountResult) SetSuccess(x interface{}) {
	p.Success = x.(*AccountCreateResp)
}

var fieldIDToName_AccountServiceCreateAccountResult = map[int16]string{
	0: "success",
}

func (p *AccountServiceCreateAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceCreateAccountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceCreateAccountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceCreateAccountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAccountCreateResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceCreateAccountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAccount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceCreateAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AccountServiceCreateAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceCreateAccountResult(%+v)", *p)
}

func (p *AccountServiceCreateAccountResult) DeepEqual(ano *AccountServiceCreateAccountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AccountServiceCreateAccountResult) Field0DeepEqual(src *AccountCreateResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceUpdateAccountPasswordArgs struct {
	Req *AccountPasswordUpdateReq `thrift:"req,1" frugal:"1,default,AccountPasswordUpdateReq" json:"req"`
}

func NewAccountServiceUpdateAccountPasswordArgs() *AccountServiceUpdateAccountPasswordArgs {
	return &AccountServiceUpdateAccountPasswordArgs{}
}

func (p *AccountServiceUpdateAccountPasswordArgs) InitDefault() {
	*p = AccountServiceUpdateAccountPasswordArgs{}
}

var AccountServiceUpdateAccountPasswordArgs_Req_DEFAULT *AccountPasswordUpdateReq

func (p *AccountServiceUpdateAccountPasswordArgs) GetReq() (v *AccountPasswordUpdateReq) {
	if !p.IsSetReq() {
		return AccountServiceUpdateAccountPasswordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AccountServiceUpdateAccountPasswordArgs) SetReq(val *AccountPasswordUpdateReq) {
	p.Req = val
}

var fieldIDToName_AccountServiceUpdateAccountPasswordArgs = map[int16]string{
	1: "req",
}

func (p *AccountServiceUpdateAccountPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AccountServiceUpdateAccountPasswordArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceUpdateAccountPasswordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceUpdateAccountPasswordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAccountPasswordUpdateReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceUpdateAccountPasswordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAccountPassword_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceUpdateAccountPasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountServiceUpdateAccountPasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceUpdateAccountPasswordArgs(%+v)", *p)
}

func (p *AccountServiceUpdateAccountPasswordArgs) DeepEqual(ano *AccountServiceUpdateAccountPasswordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AccountServiceUpdateAccountPasswordArgs) Field1DeepEqual(src *AccountPasswordUpdateReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceUpdateAccountPasswordResult struct {
	Success *AccountPasswordUpdateResp `thrift:"success,0,optional" frugal:"0,optional,AccountPasswordUpdateResp" json:"success,omitempty"`
}

func NewAccountServiceUpdateAccountPasswordResult() *AccountServiceUpdateAccountPasswordResult {
	return &AccountServiceUpdateAccountPasswordResult{}
}

func (p *AccountServiceUpdateAccountPasswordResult) InitDefault() {
	*p = AccountServiceUpdateAccountPasswordResult{}
}

var AccountServiceUpdateAccountPasswordResult_Success_DEFAULT *AccountPasswordUpdateResp

func (p *AccountServiceUpdateAccountPasswordResult) GetSuccess() (v *AccountPasswordUpdateResp) {
	if !p.IsSetSuccess() {
		return AccountServiceUpdateAccountPasswordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccountServiceUpdateAccountPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*AccountPasswordUpdateResp)
}

var fieldIDToName_AccountServiceUpdateAccountPasswordResult = map[int16]string{
	0: "success",
}

func (p *AccountServiceUpdateAccountPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceUpdateAccountPasswordResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceUpdateAccountPasswordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceUpdateAccountPasswordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAccountPasswordUpdateResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceUpdateAccountPasswordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAccountPassword_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceUpdateAccountPasswordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AccountServiceUpdateAccountPasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceUpdateAccountPasswordResult(%+v)", *p)
}

func (p *AccountServiceUpdateAccountPasswordResult) DeepEqual(ano *AccountServiceUpdateAccountPasswordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AccountServiceUpdateAccountPasswordResult) Field0DeepEqual(src *AccountPasswordUpdateResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceResetAccountPasswordArgs struct {
	Req *AccountPasswordResetReq `thrift:"req,1" frugal:"1,default,AccountPasswordResetReq" json:"req"`
}

func NewAccountServiceResetAccountPasswordArgs() *AccountServiceResetAccountPasswordArgs {
	return &AccountServiceResetAccountPasswordArgs{}
}

func (p *AccountServiceResetAccountPasswordArgs) InitDefault() {
	*p = AccountServiceResetAccountPasswordArgs{}
}

var AccountServiceResetAccountPasswordArgs_Req_DEFAULT *AccountPasswordResetReq

func (p *AccountServiceResetAccountPasswordArgs) GetReq() (v *AccountPasswordResetReq) {
	if !p.IsSetReq() {
		return AccountServiceResetAccountPasswordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AccountServiceResetAccountPasswordArgs) SetReq(val *AccountPasswordResetReq) {
	p.Req = val
}

var fieldIDToName_AccountServiceResetAccountPasswordArgs = map[int16]string{
	1: "req",
}

func (p *AccountServiceResetAccountPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AccountServiceResetAccountPasswordArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceResetAccountPasswordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceResetAccountPasswordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAccountPasswordResetReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceResetAccountPasswordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResetAccountPassword_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceResetAccountPasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountServiceResetAccountPasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceResetAccountPasswordArgs(%+v)", *p)
}

func (p *AccountServiceResetAccountPasswordArgs) DeepEqual(ano *AccountServiceResetAccountPasswordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AccountServiceResetAccountPasswordArgs) Field1DeepEqual(src *AccountPasswordResetReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceResetAccountPasswordResult struct {
	Success *AccountPasswordResetResp `thrift:"success,0,optional" frugal:"0,optional,AccountPasswordResetResp" json:"success,omitempty"`
}

func NewAccountServiceResetAccountPasswordResult() *AccountServiceResetAccountPasswordResult {
	return &AccountServiceResetAccountPasswordResult{}
}

func (p *AccountServiceResetAccountPasswordResult) InitDefault() {
	*p = AccountServiceResetAccountPasswordResult{}
}

var AccountServiceResetAccountPasswordResult_Success_DEFAULT *AccountPasswordResetResp

func (p *AccountServiceResetAccountPasswordResult) GetSuccess() (v *AccountPasswordResetResp) {
	if !p.IsSetSuccess() {
		return AccountServiceResetAccountPasswordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccountServiceResetAccountPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*AccountPasswordResetResp)
}

var fieldIDToName_AccountServiceResetAccountPasswordResult = map[int16]string{
	0: "success",
}

func (p *AccountServiceResetAccountPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceResetAccountPasswordResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceResetAccountPasswordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceResetAccountPasswordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAccountPasswordResetResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceResetAccountPasswordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResetAccountPassword_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceResetAccountPasswordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AccountServiceResetAccountPasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceResetAccountPasswordResult(%+v)", *p)
}

func (p *AccountServiceResetAccountPasswordResult) DeepEqual(ano *AccountServiceResetAccountPasswordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AccountServiceResetAccountPasswordResult) Field0DeepEqual(src *AccountPasswordResetResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceUpdateAccountStatusArgs struct {
	Req *AccountStatusUpdateReq `thrift:"req,1" frugal:"1,default,AccountStatusUpdateReq" json:"req"`
}

func NewAccountServiceUpdateAccountStatusArgs() *AccountServiceUpdateAccountStatusArgs {
	return &AccountServiceUpdateAccountStatusArgs{}
}

func (p *AccountServiceUpdateAccountStatusArgs) InitDefault() {
	*p = AccountServiceUpdateAccountStatusArgs{}
}

var AccountServiceUpdateAccountStatusArgs_Req_DEFAULT *AccountStatusUpdateReq

func (p *AccountServiceUpdateAccountStatusArgs) GetReq() (v *AccountStatusUpdateReq) {
	if !p.IsSetReq() {
		return AccountServiceUpdateAccountStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AccountServiceUpdateAccountStatusArgs) SetReq(val *AccountStatusUpdateReq) {
	p.Req = val
}

var fieldIDToName_AccountServiceUpdateAccountStatusArgs = map[int16]string{
	1: "req",
}

func (p *AccountServiceUpdateAccountStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AccountServiceUpdateAccountStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceUpdateAccountStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceUpdateAccountStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAccountStatusUpdateReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceUpdateAccountStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAccountStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceUpdateAccountStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountServiceUpdateAccountStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceUpdateAccountStatusArgs(%+v)", *p)
}

func (p *AccountServiceUpdateAccountStatusArgs) DeepEqual(ano *AccountServiceUpdateAccountStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AccountServiceUpdateAccountStatusArgs) Field1DeepEqual(src *AccountStatusUpdateReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceUpdateAccountStatusResult struct {
	Success *AccountStatusUpdateResp `thrift:"success,0,optional" frugal:"0,optional,AccountStatusUpdateResp" json:"success,omitempty"`
}

func NewAccountServiceUpdateAccountStatusResult() *AccountServiceUpdateAccountStatusResult {
	return &AccountServiceUpdateAccountStatusResult{}
}

func (p *AccountServiceUpdateAccountStatusResult) InitDefault() {
	*p = AccountServiceUpdateAccountStatusResult{}
}

var AccountServiceUpdateAccountStatusResult_Success_DEFAULT *AccountStatusUpdateResp

func (p *AccountServiceUpdateAccountStatusResult) GetSuccess() (v *AccountStatusUpdateResp) {
	if !p.IsSetSuccess() {
		return AccountServiceUpdateAccountStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccountServiceUpdateAccountStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*AccountStatusUpdateResp)
}

var fieldIDToName_AccountServiceUpdateAccountStatusResult = map[int16]string{
	0: "success",
}

func (p *AccountServiceUpdateAccountStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceUpdateAccountStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceUpdateAccountStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceUpdateAccountStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAccountStatusUpdateResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceUpdateAccountStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAccountStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceUpdateAccountStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AccountServiceUpdateAccountStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceUpdateAccountStatusResult(%+v)", *p)
}

func (p *AccountServiceUpdateAccountStatusResult) DeepEqual(ano *AccountServiceUpdateAccountStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AccountServiceUpdateAccountStatusResult) Field0DeepEqual(src *AccountStatusUpdateResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceLoginArgs struct {
	Req *AccountLoginReq `thrift:"req,1" frugal:"1,default,AccountLoginReq" json:"req"`
}

func NewAccountServiceLoginArgs() *AccountServiceLoginArgs {
	return &AccountServiceLoginArgs{}
}

func (p *AccountServiceLoginArgs) InitDefault() {
	*p = AccountServiceLoginArgs{}
}

var AccountServiceLoginArgs_Req_DEFAULT *AccountLoginReq

func (p *AccountServiceLoginArgs) GetReq() (v *AccountLoginReq) {
	if !p.IsSetReq() {
		return AccountServiceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AccountServiceLoginArgs) SetReq(val *AccountLoginReq) {
	p.Req = val
}

var fieldIDToName_AccountServiceLoginArgs = map[int16]string{
	1: "req",
}

func (p *AccountServiceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AccountServiceLoginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceLoginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAccountLoginReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceLoginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Login_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceLoginArgs(%+v)", *p)
}

func (p *AccountServiceLoginArgs) DeepEqual(ano *AccountServiceLoginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AccountServiceLoginArgs) Field1DeepEqual(src *AccountLoginReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceLoginResult struct {
	Success *AccountLoginResp `thrift:"success,0,optional" frugal:"0,optional,AccountLoginResp" json:"success,omitempty"`
}

func NewAccountServiceLoginResult() *AccountServiceLoginResult {
	return &AccountServiceLoginResult{}
}

func (p *AccountServiceLoginResult) InitDefault() {
	*p = AccountServiceLoginResult{}
}

var AccountServiceLoginResult_Success_DEFAULT *AccountLoginResp

func (p *AccountServiceLoginResult) GetSuccess() (v *AccountLoginResp) {
	if !p.IsSetSuccess() {
		return AccountServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccountServiceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*AccountLoginResp)
}

var fieldIDToName_AccountServiceLoginResult = map[int16]string{
	0: "success",
}

func (p *AccountServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceLoginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceLoginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceLoginResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAccountLoginResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceLoginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Login_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AccountServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceLoginResult(%+v)", *p)
}

func (p *AccountServiceLoginResult) DeepEqual(ano *AccountServiceLoginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AccountServiceLoginResult) Field0DeepEqual(src *AccountLoginResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceQueryLoginRecordArgs struct {
	Req *LoginRecordQueryReq `thrift:"req,1" frugal:"1,default,LoginRecordQueryReq" json:"req"`
}

func NewAccountServiceQueryLoginRecordArgs() *AccountServiceQueryLoginRecordArgs {
	return &AccountServiceQueryLoginRecordArgs{}
}

func (p *AccountServiceQueryLoginRecordArgs) InitDefault() {
	*p = AccountServiceQueryLoginRecordArgs{}
}

var AccountServiceQueryLoginRecordArgs_Req_DEFAULT *LoginRecordQueryReq

func (p *AccountServiceQueryLoginRecordArgs) GetReq() (v *LoginRecordQueryReq) {
	if !p.IsSetReq() {
		return AccountServiceQueryLoginRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AccountServiceQueryLoginRecordArgs) SetReq(val *LoginRecordQueryReq) {
	p.Req = val
}

var fieldIDToName_AccountServiceQueryLoginRecordArgs = map[int16]string{
	1: "req",
}

func (p *AccountServiceQueryLoginRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AccountServiceQueryLoginRecordArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceQueryLoginRecordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceQueryLoginRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewLoginRecordQueryReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceQueryLoginRecordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryLoginRecord_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceQueryLoginRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountServiceQueryLoginRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceQueryLoginRecordArgs(%+v)", *p)
}

func (p *AccountServiceQueryLoginRecordArgs) DeepEqual(ano *AccountServiceQueryLoginRecordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AccountServiceQueryLoginRecordArgs) Field1DeepEqual(src *LoginRecordQueryReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceQueryLoginRecordResult struct {
	Success *LoginRecordQueryResp `thrift:"success,0,optional" frugal:"0,optional,LoginRecordQueryResp" json:"success,omitempty"`
}

func NewAccountServiceQueryLoginRecordResult() *AccountServiceQueryLoginRecordResult {
	return &AccountServiceQueryLoginRecordResult{}
}

func (p *AccountServiceQueryLoginRecordResult) InitDefault() {
	*p = AccountServiceQueryLoginRecordResult{}
}

var AccountServiceQueryLoginRecordResult_Success_DEFAULT *LoginRecordQueryResp

func (p *AccountServiceQueryLoginRecordResult) GetSuccess() (v *LoginRecordQueryResp) {
	if !p.IsSetSuccess() {
		return AccountServiceQueryLoginRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccountServiceQueryLoginRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginRecordQueryResp)
}

var fieldIDToName_AccountServiceQueryLoginRecordResult = map[int16]string{
	0: "success",
}

func (p *AccountServiceQueryLoginRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceQueryLoginRecordResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceQueryLoginRecordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceQueryLoginRecordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewLoginRecordQueryResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceQueryLoginRecordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryLoginRecord_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceQueryLoginRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AccountServiceQueryLoginRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceQueryLoginRecordResult(%+v)", *p)
}

func (p *AccountServiceQueryLoginRecordResult) DeepEqual(ano *AccountServiceQueryLoginRecordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AccountServiceQueryLoginRecordResult) Field0DeepEqual(src *LoginRecordQueryResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceCreateUserArgs struct {
	Req *UserCreateReq `thrift:"req,1" frugal:"1,default,UserCreateReq" json:"req"`
}

func NewAccountServiceCreateUserArgs() *AccountServiceCreateUserArgs {
	return &AccountServiceCreateUserArgs{}
}

func (p *AccountServiceCreateUserArgs) InitDefault() {
	*p = AccountServiceCreateUserArgs{}
}

var AccountServiceCreateUserArgs_Req_DEFAULT *UserCreateReq

func (p *AccountServiceCreateUserArgs) GetReq() (v *UserCreateReq) {
	if !p.IsSetReq() {
		return AccountServiceCreateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AccountServiceCreateUserArgs) SetReq(val *UserCreateReq) {
	p.Req = val
}

var fieldIDToName_AccountServiceCreateUserArgs = map[int16]string{
	1: "req",
}

func (p *AccountServiceCreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AccountServiceCreateUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceCreateUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceCreateUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUserCreateReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceCreateUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceCreateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountServiceCreateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceCreateUserArgs(%+v)", *p)
}

func (p *AccountServiceCreateUserArgs) DeepEqual(ano *AccountServiceCreateUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AccountServiceCreateUserArgs) Field1DeepEqual(src *UserCreateReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceCreateUserResult struct {
	Success *UserCreateResp `thrift:"success,0,optional" frugal:"0,optional,UserCreateResp" json:"success,omitempty"`
}

func NewAccountServiceCreateUserResult() *AccountServiceCreateUserResult {
	return &AccountServiceCreateUserResult{}
}

func (p *AccountServiceCreateUserResult) InitDefault() {
	*p = AccountServiceCreateUserResult{}
}

var AccountServiceCreateUserResult_Success_DEFAULT *UserCreateResp

func (p *AccountServiceCreateUserResult) GetSuccess() (v *UserCreateResp) {
	if !p.IsSetSuccess() {
		return AccountServiceCreateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccountServiceCreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserCreateResp)
}

var fieldIDToName_AccountServiceCreateUserResult = map[int16]string{
	0: "success",
}

func (p *AccountServiceCreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceCreateUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceCreateUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceCreateUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUserCreateResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceCreateUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceCreateUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AccountServiceCreateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceCreateUserResult(%+v)", *p)
}

func (p *AccountServiceCreateUserResult) DeepEqual(ano *AccountServiceCreateUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AccountServiceCreateUserResult) Field0DeepEqual(src *UserCreateResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceQueryUserArgs struct {
	Req *UserQueryReq `thrift:"req,1" frugal:"1,default,UserQueryReq" json:"req"`
}

func NewAccountServiceQueryUserArgs() *AccountServiceQueryUserArgs {
	return &AccountServiceQueryUserArgs{}
}

func (p *AccountServiceQueryUserArgs) InitDefault() {
	*p = AccountServiceQueryUserArgs{}
}

var AccountServiceQueryUserArgs_Req_DEFAULT *UserQueryReq

func (p *AccountServiceQueryUserArgs) GetReq() (v *UserQueryReq) {
	if !p.IsSetReq() {
		return AccountServiceQueryUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AccountServiceQueryUserArgs) SetReq(val *UserQueryReq) {
	p.Req = val
}

var fieldIDToName_AccountServiceQueryUserArgs = map[int16]string{
	1: "req",
}

func (p *AccountServiceQueryUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AccountServiceQueryUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceQueryUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceQueryUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUserQueryReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceQueryUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceQueryUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountServiceQueryUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceQueryUserArgs(%+v)", *p)
}

func (p *AccountServiceQueryUserArgs) DeepEqual(ano *AccountServiceQueryUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AccountServiceQueryUserArgs) Field1DeepEqual(src *UserQueryReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceQueryUserResult struct {
	Success *UserQueryResp `thrift:"success,0,optional" frugal:"0,optional,UserQueryResp" json:"success,omitempty"`
}

func NewAccountServiceQueryUserResult() *AccountServiceQueryUserResult {
	return &AccountServiceQueryUserResult{}
}

func (p *AccountServiceQueryUserResult) InitDefault() {
	*p = AccountServiceQueryUserResult{}
}

var AccountServiceQueryUserResult_Success_DEFAULT *UserQueryResp

func (p *AccountServiceQueryUserResult) GetSuccess() (v *UserQueryResp) {
	if !p.IsSetSuccess() {
		return AccountServiceQueryUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccountServiceQueryUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserQueryResp)
}

var fieldIDToName_AccountServiceQueryUserResult = map[int16]string{
	0: "success",
}

func (p *AccountServiceQueryUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceQueryUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceQueryUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceQueryUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUserQueryResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceQueryUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceQueryUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AccountServiceQueryUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceQueryUserResult(%+v)", *p)
}

func (p *AccountServiceQueryUserResult) DeepEqual(ano *AccountServiceQueryUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AccountServiceQueryUserResult) Field0DeepEqual(src *UserQueryResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceUpdateUserArgs struct {
	Req *UserUpdateReq `thrift:"req,1" frugal:"1,default,UserUpdateReq" json:"req"`
}

func NewAccountServiceUpdateUserArgs() *AccountServiceUpdateUserArgs {
	return &AccountServiceUpdateUserArgs{}
}

func (p *AccountServiceUpdateUserArgs) InitDefault() {
	*p = AccountServiceUpdateUserArgs{}
}

var AccountServiceUpdateUserArgs_Req_DEFAULT *UserUpdateReq

func (p *AccountServiceUpdateUserArgs) GetReq() (v *UserUpdateReq) {
	if !p.IsSetReq() {
		return AccountServiceUpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AccountServiceUpdateUserArgs) SetReq(val *UserUpdateReq) {
	p.Req = val
}

var fieldIDToName_AccountServiceUpdateUserArgs = map[int16]string{
	1: "req",
}

func (p *AccountServiceUpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AccountServiceUpdateUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceUpdateUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceUpdateUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUserUpdateReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceUpdateUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceUpdateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountServiceUpdateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceUpdateUserArgs(%+v)", *p)
}

func (p *AccountServiceUpdateUserArgs) DeepEqual(ano *AccountServiceUpdateUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AccountServiceUpdateUserArgs) Field1DeepEqual(src *UserUpdateReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AccountServiceUpdateUserResult struct {
	Success *UserUpdateResp `thrift:"success,0,optional" frugal:"0,optional,UserUpdateResp" json:"success,omitempty"`
}

func NewAccountServiceUpdateUserResult() *AccountServiceUpdateUserResult {
	return &AccountServiceUpdateUserResult{}
}

func (p *AccountServiceUpdateUserResult) InitDefault() {
	*p = AccountServiceUpdateUserResult{}
}

var AccountServiceUpdateUserResult_Success_DEFAULT *UserUpdateResp

func (p *AccountServiceUpdateUserResult) GetSuccess() (v *UserUpdateResp) {
	if !p.IsSetSuccess() {
		return AccountServiceUpdateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccountServiceUpdateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserUpdateResp)
}

var fieldIDToName_AccountServiceUpdateUserResult = map[int16]string{
	0: "success",
}

func (p *AccountServiceUpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccountServiceUpdateUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountServiceUpdateUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountServiceUpdateUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUserUpdateResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AccountServiceUpdateUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountServiceUpdateUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AccountServiceUpdateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountServiceUpdateUserResult(%+v)", *p)
}

func (p *AccountServiceUpdateUserResult) DeepEqual(ano *AccountServiceUpdateUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AccountServiceUpdateUserResult) Field0DeepEqual(src *UserUpdateResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
