// Code generated by Kitex v0.7.3. DO NOT EDIT.

package accountservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	account "shield/gateway/kitex_gen/kaidog/shield/account"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	QueryAccount(ctx context.Context, req *account.AccountQueryReq, callOptions ...callopt.Option) (r *account.AccountQueryResp, err error)
	CreateAccount(ctx context.Context, req *account.AccountCreateReq, callOptions ...callopt.Option) (r *account.AccountCreateResp, err error)
	UpdateAccountPassword(ctx context.Context, req *account.AccountPasswordUpdateReq, callOptions ...callopt.Option) (r *account.AccountPasswordUpdateResp, err error)
	ResetAccountPassword(ctx context.Context, req *account.AccountPasswordResetReq, callOptions ...callopt.Option) (r *account.AccountPasswordResetResp, err error)
	UpdateAccountStatus(ctx context.Context, req *account.AccountStatusUpdateReq, callOptions ...callopt.Option) (r *account.AccountStatusUpdateResp, err error)
	Login(ctx context.Context, req *account.AccountLoginReq, callOptions ...callopt.Option) (r *account.AccountLoginResp, err error)
	QueryLoginRecord(ctx context.Context, req *account.LoginRecordQueryReq, callOptions ...callopt.Option) (r *account.LoginRecordQueryResp, err error)
	CreateUser(ctx context.Context, req *account.UserCreateReq, callOptions ...callopt.Option) (r *account.UserCreateResp, err error)
	QueryUser(ctx context.Context, req *account.UserQueryReq, callOptions ...callopt.Option) (r *account.UserQueryResp, err error)
	UpdateUser(ctx context.Context, req *account.UserUpdateReq, callOptions ...callopt.Option) (r *account.UserUpdateResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAccountServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAccountServiceClient struct {
	*kClient
}

func (p *kAccountServiceClient) QueryAccount(ctx context.Context, req *account.AccountQueryReq, callOptions ...callopt.Option) (r *account.AccountQueryResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryAccount(ctx, req)
}

func (p *kAccountServiceClient) CreateAccount(ctx context.Context, req *account.AccountCreateReq, callOptions ...callopt.Option) (r *account.AccountCreateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateAccount(ctx, req)
}

func (p *kAccountServiceClient) UpdateAccountPassword(ctx context.Context, req *account.AccountPasswordUpdateReq, callOptions ...callopt.Option) (r *account.AccountPasswordUpdateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateAccountPassword(ctx, req)
}

func (p *kAccountServiceClient) ResetAccountPassword(ctx context.Context, req *account.AccountPasswordResetReq, callOptions ...callopt.Option) (r *account.AccountPasswordResetResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ResetAccountPassword(ctx, req)
}

func (p *kAccountServiceClient) UpdateAccountStatus(ctx context.Context, req *account.AccountStatusUpdateReq, callOptions ...callopt.Option) (r *account.AccountStatusUpdateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateAccountStatus(ctx, req)
}

func (p *kAccountServiceClient) Login(ctx context.Context, req *account.AccountLoginReq, callOptions ...callopt.Option) (r *account.AccountLoginResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, req)
}

func (p *kAccountServiceClient) QueryLoginRecord(ctx context.Context, req *account.LoginRecordQueryReq, callOptions ...callopt.Option) (r *account.LoginRecordQueryResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryLoginRecord(ctx, req)
}

func (p *kAccountServiceClient) CreateUser(ctx context.Context, req *account.UserCreateReq, callOptions ...callopt.Option) (r *account.UserCreateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUser(ctx, req)
}

func (p *kAccountServiceClient) QueryUser(ctx context.Context, req *account.UserQueryReq, callOptions ...callopt.Option) (r *account.UserQueryResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryUser(ctx, req)
}

func (p *kAccountServiceClient) UpdateUser(ctx context.Context, req *account.UserUpdateReq, callOptions ...callopt.Option) (r *account.UserUpdateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateUser(ctx, req)
}
