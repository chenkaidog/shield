// Code generated by Validator v0.1.4. DO NOT EDIT.

package account

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *Account) IsValid() error {
	return nil
}
func (p *AccountQueryReq) IsValid() error {
	if p.Page < int64(1) {
		return fmt.Errorf("field Page ge rule failed, current value: %v", p.Page)
	}
	if p.Page > int64(999) {
		return fmt.Errorf("field Page le rule failed, current value: %v", p.Page)
	}
	if p.Size < int64(1) {
		return fmt.Errorf("field Size ge rule failed, current value: %v", p.Size)
	}
	if p.Size > int64(999) {
		return fmt.Errorf("field Size le rule failed, current value: %v", p.Size)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *AccountQueryResp) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *AccountCreateReq) IsValid() error {
	_src := "^\\w{8,64}$"
	if ok, _ := regexp.MatchString(_src, p.Username); !ok {
		return fmt.Errorf("field Username pattern rule failed, current value: %v", p.Username)
	}
	_src1 := "^\\w{8,128}$"
	if ok, _ := regexp.MatchString(_src1, p.Password); !ok {
		return fmt.Errorf("field Password pattern rule failed, current value: %v", p.Password)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *AccountCreateResp) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *AccountPasswordUpdateReq) IsValid() error {
	_src := "^\\w{8,128}$"
	if ok, _ := regexp.MatchString(_src, p.AccountID); !ok {
		return fmt.Errorf("field AccountID pattern rule failed, current value: %v", p.AccountID)
	}
	_src1 := "^\\w{8,128}$"
	if ok, _ := regexp.MatchString(_src1, p.Password); !ok {
		return fmt.Errorf("field Password pattern rule failed, current value: %v", p.Password)
	}
	_src2 := "^[0-9a-zA-Z.,_]{8,128}$"
	if ok, _ := regexp.MatchString(_src2, p.NewPassword_); !ok {
		return fmt.Errorf("field NewPassword_ pattern rule failed, current value: %v", p.NewPassword_)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *AccountPasswordUpdateResp) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *AccountPasswordResetReq) IsValid() error {
	_src := "^\\w{8,128}$"
	if ok, _ := regexp.MatchString(_src, p.AccountID); !ok {
		return fmt.Errorf("field AccountID pattern rule failed, current value: %v", p.AccountID)
	}
	_src1 := "^[0-9a-zA-Z.,_]{8,128}$"
	if ok, _ := regexp.MatchString(_src1, p.Password); !ok {
		return fmt.Errorf("field Password pattern rule failed, current value: %v", p.Password)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *AccountPasswordResetResp) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *AccountStatusUpdateReq) IsValid() error {
	_src := "^\\w{8,128}$"
	if ok, _ := regexp.MatchString(_src, p.AccountID); !ok {
		return fmt.Errorf("field AccountID pattern rule failed, current value: %v", p.AccountID)
	}
	_src1 := []AccountStatus{AccountStatus_valid, AccountStatus_invalid}
	var _exist bool
	for _, src := range _src1 {
		if p.Status == src {
			_exist = true
			break
		}
	}
	if !_exist {
		return fmt.Errorf("field Status in rule failed, current value: %v", p.Status)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *AccountStatusUpdateResp) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *LoginRecord) IsValid() error {
	return nil
}
func (p *AccountLoginReq) IsValid() error {
	_src := "^\\w{8,128}$"
	if ok, _ := regexp.MatchString(_src, p.Username); !ok {
		return fmt.Errorf("field Username pattern rule failed, current value: %v", p.Username)
	}
	_src1 := "^\\w{8,128}$"
	if ok, _ := regexp.MatchString(_src1, p.Password); !ok {
		return fmt.Errorf("field Password pattern rule failed, current value: %v", p.Password)
	}
	_src2 := "((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})(\\.((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})){3}"
	if ok, _ := regexp.MatchString(_src2, p.Ipv4); !ok {
		return fmt.Errorf("field Ipv4 pattern rule failed, current value: %v", p.Ipv4)
	}
	_src3 := "^\\w{1,128}$"
	if ok, _ := regexp.MatchString(_src3, p.Device); !ok {
		return fmt.Errorf("field Device pattern rule failed, current value: %v", p.Device)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *AccountLoginResp) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *LoginRecordQueryReq) IsValid() error {
	_src := "^\\w{8,128}$"
	if ok, _ := regexp.MatchString(_src, p.AccountID); !ok {
		return fmt.Errorf("field AccountID pattern rule failed, current value: %v", p.AccountID)
	}
	if p.Page < int64(1) {
		return fmt.Errorf("field Page ge rule failed, current value: %v", p.Page)
	}
	if p.Page > int64(999) {
		return fmt.Errorf("field Page le rule failed, current value: %v", p.Page)
	}
	if p.Size < int64(1) {
		return fmt.Errorf("field Size ge rule failed, current value: %v", p.Size)
	}
	if p.Size > int64(999) {
		return fmt.Errorf("field Size le rule failed, current value: %v", p.Size)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *LoginRecordQueryResp) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *User) IsValid() error {
	return nil
}
func (p *UserCreateReq) IsValid() error {
	_src := "^\\w{8,128}$"
	if ok, _ := regexp.MatchString(_src, p.AccountID); !ok {
		return fmt.Errorf("field AccountID pattern rule failed, current value: %v", p.AccountID)
	}
	_src1 := "^[\\p{Han}a-zA-Z\\s]{1,128}$"
	if ok, _ := regexp.MatchString(_src1, p.Name); !ok {
		return fmt.Errorf("field Name pattern rule failed, current value: %v", p.Name)
	}
	_src2 := []Gender{Gender_male, Gender_female, Gender_others}
	var _exist bool
	for _, src := range _src2 {
		if p.Gender == src {
			_exist = true
			break
		}
	}
	if !_exist {
		return fmt.Errorf("field Gender in rule failed, current value: %v", p.Gender)
	}
	_src3 := "^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$"
	if ok, _ := regexp.MatchString(_src3, p.Phone); !ok {
		return fmt.Errorf("field Phone pattern rule failed, current value: %v", p.Phone)
	}
	_src4 := "^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$"
	if ok, _ := regexp.MatchString(_src4, p.Email); !ok {
		return fmt.Errorf("field Email pattern rule failed, current value: %v", p.Email)
	}
	if len(p.Description) > int(256) {
		return fmt.Errorf("field Description max_len rule failed, current value: %d", len(p.Description))
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UserCreateResp) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UserQueryReq) IsValid() error {
	if p.UserID != nil {
		_src := "^\\w{8,128}$"
		if ok, _ := regexp.MatchString(_src, *p.UserID); !ok {
			return fmt.Errorf("field UserID pattern rule failed, current value: %v", *p.UserID)
		}
	}
	if p.AccountID != nil {
		_src1 := "^\\w{8,128}$"
		if ok, _ := regexp.MatchString(_src1, *p.AccountID); !ok {
			return fmt.Errorf("field AccountID pattern rule failed, current value: %v", *p.AccountID)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UserQueryResp) IsValid() error {
	if p.User != nil {
		if err := p.User.IsValid(); err != nil {
			return fmt.Errorf("field User not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UserUpdateReq) IsValid() error {
	_src := "^\\w{8,128}$"
	if ok, _ := regexp.MatchString(_src, p.UserID); !ok {
		return fmt.Errorf("field UserID pattern rule failed, current value: %v", p.UserID)
	}
	if p.Name != nil {
		_src1 := "^[\\p{Han}a-zA-Z\\s]{1,128}$"
		if ok, _ := regexp.MatchString(_src1, *p.Name); !ok {
			return fmt.Errorf("field Name pattern rule failed, current value: %v", *p.Name)
		}
	}
	if p.Gender != nil {
		_src2 := []Gender{Gender_male, Gender_female, Gender_others}
		var _exist bool
		for _, src := range _src2 {
			if *p.Gender == src {
				_exist = true
				break
			}
		}
		if !_exist {
			return fmt.Errorf("field Gender in rule failed, current value: %v", *p.Gender)
		}
	}
	if p.Phone != nil {
		_src3 := "^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$"
		if ok, _ := regexp.MatchString(_src3, *p.Phone); !ok {
			return fmt.Errorf("field Phone pattern rule failed, current value: %v", *p.Phone)
		}
	}
	if p.Email != nil {
		_src4 := "^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$"
		if ok, _ := regexp.MatchString(_src4, *p.Email); !ok {
			return fmt.Errorf("field Email pattern rule failed, current value: %v", *p.Email)
		}
	}
	if p.Description != nil {
		if len(*p.Description) > int(256) {
			return fmt.Errorf("field Description max_len rule failed, current value: %d", len(*p.Description))
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UserUpdateResp) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
